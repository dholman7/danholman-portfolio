[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "ai-rulesets"
version = "0.1.0"
description = "Organizational AI rulesets and utilities for creating custom development standards and guidelines"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Dan Holman", email = "danxholman@gmail.com"}
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Testing",
    "Topic :: Software Development :: Quality Assurance",
]
keywords = ["ai", "rulesets", "standards", "guidelines", "cursor", "copilot", "development", "automation"]
requires-python = ">=3.13"
dependencies = [
    "pyyaml>=6.0",
    "click>=8.0",
    "jinja2>=3.0",
    "pydantic>=2.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0",
    "pytest-cov>=4.0",
    "black>=23.0",
    "ruff>=0.1.0",
    "mypy>=1.0",
    "pre-commit>=3.0",
    "allure-pytest>=2.13.0",
    "allure-python-commons>=2.13.0",
    "psutil>=5.9.0",
]

[project.urls]
Homepage = "https://github.com/danholman/ai-rulesets"
Repository = "https://github.com/danholman/ai-rulesets"
Issues = "https://github.com/danholman/ai-rulesets/issues"

[project.scripts]
ai-rulesets = "ai_rulesets.main:main"
quality-check = "ai_rulesets.cli.quality_checker:main"

[project.gui-scripts]

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-dir]
"" = "src"

[tool.black]
line-length = 88
target-version = ['py313']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.ruff]
target-version = "py313"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]

[tool.mypy]
python_version = "3.13"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=ai_rulesets",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "unit: marks tests as unit tests",
    "component: marks tests as component tests with mocked dependencies",
    "integration: marks tests as integration tests",
    "e2e: marks tests as end-to-end tests",
    "ai_generated: marks tests as AI-generated test cases",
    "test_generation: marks tests related to test generation functionality",
    "llm_integration: marks tests related to LLM integration",
    "prompt_engineering: marks tests related to prompt engineering",
]
