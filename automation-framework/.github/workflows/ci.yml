name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to test against'
        required: true
        default: 'staging'
        type: choice
        options:
        - dev
        - staging
        - prod

env:
  PYTHON_VERSION: '3.11'  # This will be read from .python-version file in future updates
  NODE_VERSION: '20'

jobs:
  # Code Quality and Security
  code-quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"
      
      - name: Run Black (code formatting)
        run: black --check src/ tests/
      
      - name: Run isort (import sorting)
        run: isort --check-only src/ tests/
      
      - name: Run Flake8 (linting)
        run: flake8 src/ tests/
      
      - name: Run Ruff (fast linting)
        run: ruff check src/ tests/
      
      - name: Run MyPy (type checking)
        run: mypy src/
      
      - name: Run Bandit (security)
        run: bandit -r src/ -f json -o bandit-report.json
      
      - name: Run Safety (dependency security)
        run: safety check --json --output safety-report.json
      
      - name: Upload security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json

  # Unit and Integration Tests
  unit-tests:
    name: Unit & Integration Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[test]"
      
      - name: Run unit tests
        run: |
          pytest tests/ -m "unit" --cov=src --cov-report=xml --cov-report=html --junitxml=junit.xml
      
      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
      
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.python-version }}
          path: |
            junit.xml
            htmlcov/

  # API Tests
  api-tests:
    name: API Tests
    runs-on: ubuntu-latest
    needs: [code-quality]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[api,test]"
      
      - name: Start mock server
        run: |
          python -m pytest tests/mocks/start_mock_server.py &
          sleep 10
      
      - name: Run API tests
        run: |
          pytest tests/ -m "api" --html=reports/api-report.html --self-contained-html --junitxml=reports/api-junit.xml
        env:
          API_BASE_URL: http://localhost:8080
          TEST_ENVIRONMENT: staging
      
      - name: Upload API test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: api-test-results
          path: |
            reports/api-report.html
            reports/api-junit.xml

  # UI Tests
  ui-tests:
    name: UI Tests
    runs-on: ubuntu-latest
    needs: [code-quality]
    strategy:
      matrix:
        browser: [chrome, firefox, edge]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[web,test]"
      
      - name: Set up Chrome
        if: matrix.browser == 'chrome'
        uses: browser-actions/setup-chrome@v1
      
      - name: Set up Firefox
        if: matrix.browser == 'firefox'
        uses: browser-actions/setup-firefox@v1
      
      - name: Set up Edge
        if: matrix.browser == 'edge'
        uses: browser-actions/setup-edge@v1
      
      - name: Run UI tests
        run: |
          pytest tests/ -m "ui" --browser=${{ matrix.browser }} --headless --html=reports/ui-${{ matrix.browser }}-report.html --self-contained-html --junitxml=reports/ui-${{ matrix.browser }}-junit.xml
        env:
          TEST_ENVIRONMENT: staging
      
      - name: Upload UI test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: ui-test-results-${{ matrix.browser }}
          path: |
            reports/ui-${{ matrix.browser }}-report.html
            reports/ui-${{ matrix.browser }}-junit.xml

  # Performance Tests
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [unit-tests]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[performance,test]"
      
      - name: Run performance tests
        run: |
          pytest tests/ -m "performance" --html=reports/performance-report.html --self-contained-html --junitxml=reports/performance-junit.xml
        env:
          TEST_ENVIRONMENT: staging
      
      - name: Upload performance test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: performance-test-results
          path: |
            reports/performance-report.html
            reports/performance-junit.xml

  # Contract Tests
  contract-tests:
    name: Contract Tests
    runs-on: ubuntu-latest
    needs: [code-quality]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[api,test]"
      
      - name: Start Pact Broker
        run: |
          docker run -d --name pact-broker -p 8080:8080 pactfoundation/pact-broker
          sleep 30
      
      - name: Run contract tests
        run: |
          pytest tests/contract/ -m "contract" --html=reports/contract-report.html --self-contained-html --junitxml=reports/contract-junit.xml
        env:
          PACT_BROKER_URL: http://localhost:8080
          TEST_ENVIRONMENT: staging
      
      - name: Upload contract test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: contract-test-results
          path: |
            reports/contract-report.html
            reports/contract-junit.xml
            pacts/


  # Parallel Test Execution
  parallel-tests:
    name: Parallel Tests
    runs-on: ubuntu-latest
    needs: [code-quality]
    strategy:
      matrix:
        worker: [1, 2, 3, 4]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[test]"
      
      - name: Run parallel tests
        run: |
          pytest tests/ -n ${{ matrix.worker }} --html=reports/parallel-${{ matrix.worker }}-report.html --self-contained-html --junitxml=reports/parallel-${{ matrix.worker }}-junit.xml
        env:
          TEST_ENVIRONMENT: staging
      
      - name: Upload parallel test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: parallel-test-results-${{ matrix.worker }}
          path: |
            reports/parallel-${{ matrix.worker }}-report.html
            reports/parallel-${{ matrix.worker }}-junit.xml

  # Test Report Aggregation
  aggregate-results:
    name: Aggregate Test Results
    runs-on: ubuntu-latest
    needs: [unit-tests, api-tests, ui-tests, performance-tests, contract-tests]
    if: always()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/
      
      - name: Aggregate test results
        run: |
          python scripts/generate_test_summary.py --input-dir artifacts/ --output reports/test_summary.md
      
      - name: Upload aggregated results
        uses: actions/upload-artifact@v4
        with:
          name: aggregated-test-results
          path: reports/
      
      - name: Comment PR with results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const results = fs.readFileSync('reports/summary.json', 'utf8');
            const summary = JSON.parse(results);
            
            const comment = `## Test Results Summary
            
            **Total Tests**: ${summary.total_tests}
            **Passed**: ${summary.passed}
            **Failed**: ${summary.failed}
            **Skipped**: ${summary.skipped}
            **Duration**: ${summary.duration}
            
            **Coverage**: ${summary.coverage}%
            
            [View detailed reports](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  # Deployment (staging)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [aggregate-results]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # Add your deployment commands here
      
      - name: Run smoke tests
        run: |
          pytest tests/ -m "smoke" --html=reports/smoke-report.html --self-contained-html
        env:
          TEST_ENVIRONMENT: staging
          API_BASE_URL: https://staging-api.example.com

  # Deployment (production)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [aggregate-results]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Deploy to production
        run: |
          echo "Deploying to production environment..."
          # Add your deployment commands here
      
      - name: Run smoke tests
        run: |
          pytest tests/ -m "smoke" --html=reports/smoke-report.html --self-contained-html
        env:
          TEST_ENVIRONMENT: prod
          API_BASE_URL: https://api.example.com
