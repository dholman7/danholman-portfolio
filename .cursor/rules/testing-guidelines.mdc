---
description: Comprehensive testing guidelines and best practices
globs: ["**/tests/**", "**/test_*.py", "**/*.test.ts", "**/*.spec.ts", "**/pytest.ini", "**/jest.config.*"]
alwaysApply: true
---

# Testing Guidelines

## MANDATORY Local Testing Before Committing
- **ALWAYS** run tests locally before committing any changes
- **MANDATORY**: Run `yarn lint && yarn test && yarn build` for React/TypeScript projects
- **MANDATORY**: Run `pytest` for Python projects before committing
- **MANDATORY**: Run `make test` for automation framework before committing
- **NEVER** commit changes that fail local testing
- **ALWAYS** verify CI will pass by running the same commands locally
- Test workflow changes by running the same commands locally
- Verify Allure reports are generated correctly
- Ensure GitHub Pages deployment will work

## MANDATORY Pre-Commit Testing Workflow
- **BEFORE ANY COMMIT**: Run the complete test suite for the affected module
- **SERVER SANITY CHECK**: For React/Node.js projects, run `yarn dev` and verify server starts successfully
- **E2E TESTING**: For React projects, run `yarn test:e2e` and verify all Playwright tests pass
- **LINTING**: Always run `yarn lint` and fix any issues before committing
- **BUILD VERIFICATION**: Run `yarn build` to ensure production build works
- **NO EXCEPTIONS**: Do not commit if any test fails or server doesn't start
- **AUTOMATIC TESTING**: Cursor should automatically run tests before considering work "done"

## General Testing Principles
- Write tests that are fast, independent, repeatable, and self-validating
- Use the Arrange-Act-Assert pattern for test structure
- Implement proper test data management
- Use Page Object Model for UI testing
- Implement proper test isolation and cleanup
- Use appropriate test doubles (mocks, stubs, fakes)
- Implement proper test reporting and documentation
- Use contract testing for API integration
- Implement proper test data factories
- Use proper test naming conventions
- Implement proper test parallelization
- Use proper test environment management
- Implement proper test result analysis
- Use proper test maintenance strategies
- Implement proper test performance monitoring

## Test Types and Organization
- **Unit Tests**: Test individual functions/methods in isolation
- **Component Tests**: Test components with mocked dependencies
- **Integration Tests**: Test interactions between components
- **End-to-End Tests**: Test complete user workflows
- **Contract Tests**: Test API contracts between services
- **Performance Tests**: Test system performance under load
- **Visual Regression Tests**: Test UI changes
- **Accessibility Tests**: Test accessibility compliance

## Test Data Management
- Use factories for generating test data
- Implement proper test data cleanup
- Use realistic but anonymized data
- Implement data-driven testing where appropriate
- Use fixtures for complex test setup
- Implement proper test data isolation

## Test Reporting
- Use Allure for comprehensive test reporting
- Implement proper test categorization
- Use proper test tagging and filtering
- Implement trend analysis and flaky test detection
- Use proper test result visualization
- Implement proper test failure analysis

## Test Automation
- Use appropriate testing frameworks (pytest, Jest, Playwright)
- Implement proper test parallelization
- Use proper test environment management
- Implement proper test data management
- Use proper test result reporting
- Implement proper test maintenance strategies

## Server Sanity Checks
- **BEFORE E2E TESTS**: Always verify the development server starts successfully
- **COMMAND**: Run `yarn dev` and check for successful startup (port 5173)
- **TIMEOUT**: Wait up to 30 seconds for server to be ready
- **VERIFICATION**: Check that `http://localhost:5173` responds with 200 status
- **AUTOMATIC**: Cursor should run server sanity check before E2E test suite
- **FAILURE HANDLING**: If server doesn't start, fix issues before running tests
- **CLEANUP**: Always stop the dev server after testing is complete