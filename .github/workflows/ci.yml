name: ci

on:
  push:
    branches: [ main ]
    paths:
      - 'automation-framework/**'
      - 'cloud-native-app/**'
      - 'ai-test-generation/**'
      - '.github/workflows/**'
      - 'Makefile'
  pull_request:
    paths:
      - 'automation-framework/**'
      - 'cloud-native-app/**'
      - 'ai-test-generation/**'
      - '.github/workflows/**'
      - 'Makefile'

jobs:
  automation-framework:
    name: Automation Framework (Python)
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: automation-framework
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.13'
          cache: 'pip'
          cache-dependency-path: |
            automation-framework/requirements.txt
            automation-framework/pyproject.toml
      - run: |
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f pyproject.toml ]; then pip install -e ".[test]"; fi
      - run: |
          if command -v ruff >/dev/null 2>&1; then ruff check . || true; fi
          if command -v black >/dev/null 2>&1; then black --check . || true; fi
      - name: Run Tests with Allure Results
        if: always()
        run: |
          if [ -d tests ] || ls -1 *.py >/dev/null 2>&1; then 
            # Create reports directory
            mkdir -p reports/allure-results
            # Run tests with Allure reporting
            pytest --alluredir=reports/allure-results -v || true
            # Run regression tests specifically if they exist
            if [ -f tests/test_regression.py ]; then
              pytest tests/test_regression.py --alluredir=reports/allure-results -v || true
            fi
            # List generated files for debugging
            ls -la reports/allure-results/ || echo "No Allure results generated"
          else 
            echo 'no tests found'
          fi
      - name: Generate Allure Report
        if: always()
        run: |
          if [ -d "reports/allure-results" ] && [ "$(ls -A reports/allure-results)" ]; then
            echo "Installing Allure commandline..."
            npm install -g allure-commandline
            echo "Generating Allure report for automation-framework..."
            allure generate reports/allure-results --clean -o reports/allure-report
            echo "Allure report generated successfully"
          else
            echo "No Allure results found for automation-framework"
          fi

      - name: Upload Allure Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: automation-framework-allure-results
          path: reports/allure-results/
          retention-days: 30

      - name: Upload Allure Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: automation-framework-allure-report
          path: reports/allure-report/
          retention-days: 30

  ai-test-generation:
    name: AI Test Generation (Python)
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ai-test-generation
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.13'
          cache: 'pip'
          cache-dependency-path: |
            ai-test-generation/requirements.txt
            ai-test-generation/pyproject.toml
      - run: |
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f pyproject.toml ]; then pip install -e ".[dev]"; fi
      - run: |
          if command -v ruff >/dev/null 2>&1; then ruff check . || true; fi
          if command -v black >/dev/null 2>&1; then black --check . || true; fi
      - name: Run Tests with Allure Results
        if: always()
        run: |
          if [ -d tests ] || ls -1 *.py >/dev/null 2>&1; then 
            # Create reports directory
            mkdir -p reports/allure-results
            # Run tests with Allure reporting
            pytest --alluredir=reports/allure-results -v || true
            # Run regression tests specifically if they exist
            if [ -f tests/test_regression.py ]; then
              pytest tests/test_regression.py --alluredir=reports/allure-results -v || true
            fi
            # List generated files for debugging
            ls -la reports/allure-results/ || echo "No Allure results generated"
          else 
            echo 'no tests found'
          fi
      - name: Generate Allure Report
        if: always()
        run: |
          if [ -d "reports/allure-results" ] && [ "$(ls -A reports/allure-results)" ]; then
            echo "Installing Allure commandline..."
            npm install -g allure-commandline
            echo "Generating Allure report for ai-test-generation..."
            allure generate reports/allure-results --clean -o reports/allure-report
            echo "Allure report generated successfully"
          else
            echo "No Allure results found for ai-test-generation"
          fi

      - name: Upload Allure Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ai-test-generation-allure-results
          path: reports/allure-results/
          retention-days: 30

      - name: Upload Allure Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ai-test-generation-allure-report
          path: reports/allure-report/
          retention-days: 30

  cloud-native-app:
    name: Cloud Native App (TypeScript/Python)
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: cloud-native-app
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.13'
          cache: 'pip'
      - uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'yarn'
      - run: |
          # Install Node.js dependencies
          if [ -f package.json ]; then yarn install; fi
          # Install Python dependencies for regression tests
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install pytest allure-pytest allure-python-commons
      - run: |
          if command -v yarn >/dev/null 2>&1; then yarn lint || true; fi
          if command -v ruff >/dev/null 2>&1; then ruff check . || true; fi
      - name: Run Tests with Allure Results
        if: always()
        run: |
          if [ -d tests ] || ls -1 *.py >/dev/null 2>&1; then 
            # Create reports directory
            mkdir -p reports/allure-results
            # Run tests with Allure reporting
            pytest --alluredir=reports/allure-results -v || true
            # Run regression tests specifically if they exist
            if [ -f tests/test_regression.py ]; then
              pytest tests/test_regression.py --alluredir=reports/allure-results -v || true
            fi
            # List generated files for debugging
            ls -la reports/allure-results/ || echo "No Allure results generated"
          else 
            echo 'no tests found'
          fi
      - name: Generate Allure Report
        if: always()
        run: |
          if [ -d "reports/allure-results" ] && [ "$(ls -A reports/allure-results)" ]; then
            echo "Installing Allure commandline..."
            npm install -g allure-commandline
            echo "Generating Allure report for cloud-native-app..."
            allure generate reports/allure-results --clean -o reports/allure-report
            echo "Allure report generated successfully"
          else
            echo "No Allure results found for cloud-native-app"
          fi

      - name: Upload Allure Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: cloud-native-app-allure-results
          path: reports/allure-results/
          retention-days: 30

      - name: Upload Allure Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: cloud-native-app-allure-report
          path: reports/allure-report/
          retention-days: 30

