name: ci

on:
  push:
    branches: [ main ]
    paths:
      - 'automation-framework/**'
      - 'cloud-native-app/**'
      - 'ai-test-generation/**'
      - '.github/workflows/**'
      - 'Makefile'
  pull_request:
    paths:
      - 'automation-framework/**'
      - 'cloud-native-app/**'
      - 'ai-test-generation/**'
      - '.github/workflows/**'
      - 'Makefile'

jobs:
  automation-framework:
    name: Automation Framework (Python)
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: automation-framework
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.13'
          cache: 'pip'
          cache-dependency-path: |
            automation-framework/requirements.txt
            automation-framework/pyproject.toml
      - run: |
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f pyproject.toml ]; then pip install -e ".[test]"; fi
      - run: |
          if command -v ruff >/dev/null 2>&1; then ruff check . || true; fi
          if command -v black >/dev/null 2>&1; then black --check . || true; fi
      - name: Run Tests with Allure Results
        if: always()
        run: |
          if [ -d tests ] || ls -1 *.py >/dev/null 2>&1; then 
            # Create reports directory
            mkdir -p reports/allure-results
            # Run tests with Allure reporting
            pytest --alluredir=reports/allure-results -v || true
            # Run regression tests specifically if they exist
            if [ -f tests/test_regression.py ]; then
              pytest tests/test_regression.py --alluredir=reports/allure-results -v || true
            fi
            # List generated files for debugging
            ls -la reports/allure-results/ || echo "No Allure results generated"
          else 
            echo 'no tests found'
          fi
      - name: Generate Allure Report
        if: always()
        run: |
          if [ -d "reports/allure-results" ] && [ "$(ls -A reports/allure-results)" ]; then
            echo "Installing Allure commandline..."
            npm install -g allure-commandline
            echo "Generating Allure report for automation-framework..."
            allure generate reports/allure-results --clean -o reports/allure-report
            echo "Allure report generated successfully"
          else
            echo "No Allure results found for automation-framework"
          fi

      - name: Upload Allure Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: automation-framework-allure-results
          path: reports/allure-results/
          retention-days: 30

      - name: Upload Allure Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: automation-framework-allure-report
          path: reports/allure-report/
          retention-days: 30

  ai-test-generation:
    name: AI Test Generation (Python)
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ai-test-generation
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.13'
          cache: 'pip'
          cache-dependency-path: |
            ai-test-generation/requirements.txt
            ai-test-generation/pyproject.toml
      - run: |
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f pyproject.toml ]; then pip install -e ".[dev]"; fi
      - run: |
          if command -v ruff >/dev/null 2>&1; then ruff check . || true; fi
          if command -v black >/dev/null 2>&1; then black --check . || true; fi
      - name: Run Tests with Allure Results
        if: always()
        run: |
          if [ -d tests ] || ls -1 *.py >/dev/null 2>&1; then 
            # Create reports directory
            mkdir -p reports/allure-results
            # Run tests with Allure reporting
            pytest --alluredir=reports/allure-results -v || true
            # Run regression tests specifically if they exist
            if [ -f tests/test_regression.py ]; then
              pytest tests/test_regression.py --alluredir=reports/allure-results -v || true
            fi
            # List generated files for debugging
            ls -la reports/allure-results/ || echo "No Allure results generated"
          else 
            echo 'no tests found'
          fi
      - name: Generate Allure Report
        if: always()
        run: |
          if [ -d "reports/allure-results" ] && [ "$(ls -A reports/allure-results)" ]; then
            echo "Installing Allure commandline..."
            npm install -g allure-commandline
            echo "Generating Allure report for ai-test-generation..."
            allure generate reports/allure-results --clean -o reports/allure-report
            echo "Allure report generated successfully"
          else
            echo "No Allure results found for ai-test-generation"
          fi

      - name: Upload Allure Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ai-test-generation-allure-results
          path: reports/allure-results/
          retention-days: 30

      - name: Upload Allure Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ai-test-generation-allure-report
          path: reports/allure-report/
          retention-days: 30

  cloud-native-app:
    name: Cloud Native App (TypeScript/Python)
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: cloud-native-app
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.13'
          cache: 'pip'
      - uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'yarn'
      - run: |
          # Install Node.js dependencies
          if [ -f package.json ]; then yarn install; fi
          # Install Python dependencies for regression tests
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install pytest allure-pytest allure-python-commons
      - run: |
          if command -v yarn >/dev/null 2>&1; then yarn lint || true; fi
          if command -v ruff >/dev/null 2>&1; then ruff check . || true; fi
      - name: Run Tests with Allure Results
        if: always()
        run: |
          if [ -d tests ] || ls -1 *.py >/dev/null 2>&1; then 
            # Create reports directory
            mkdir -p reports/allure-results
            # Run tests with Allure reporting
            pytest --alluredir=reports/allure-results -v || true
            # Run regression tests specifically if they exist
            if [ -f tests/test_regression.py ]; then
              pytest tests/test_regression.py --alluredir=reports/allure-results -v || true
            fi
            # List generated files for debugging
            ls -la reports/allure-results/ || echo "No Allure results generated"
          else 
            echo 'no tests found'
          fi
      - name: Generate Allure Report
        if: always()
        run: |
          if [ -d "reports/allure-results" ] && [ "$(ls -A reports/allure-results)" ]; then
            echo "Installing Allure commandline..."
            npm install -g allure-commandline
            echo "Generating Allure report for cloud-native-app..."
            allure generate reports/allure-results --clean -o reports/allure-report
            echo "Allure report generated successfully"
          else
            echo "No Allure results found for cloud-native-app"
          fi

      - name: Upload Allure Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: cloud-native-app-allure-results
          path: reports/allure-results/
          retention-days: 30

      - name: Upload Allure Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: cloud-native-app-allure-report
          path: reports/allure-report/
          retention-days: 30

  deploy-allure-reports:
    name: Deploy Allure Reports to GitHub Pages
    runs-on: ubuntu-latest
    needs: [automation-framework, ai-test-generation, cloud-native-app]
    if: github.ref == 'refs/heads/main' && (needs.automation-framework.result == 'success' || needs.ai-test-generation.result == 'success' || needs.cloud-native-app.result == 'success')
    permissions:
      contents: read
      pages: write
      id-token: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Allure Reports
        uses: actions/download-artifact@v4
        with:
          pattern: "*-allure-report"
          path: allure-reports/
          merge-multiple: true

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Prepare Allure Reports for Deployment
        run: |
          # Create deployment directory
          mkdir -p gh-pages-deploy
          
          # Copy reports to deployment directory
          if [ -d "allure-reports/automation-framework-allure-report" ]; then
            echo "Copying automation-framework report..."
            cp -r allure-reports/automation-framework-allure-report gh-pages-deploy/automation-framework
          else
            echo "Creating placeholder for automation-framework..."
            mkdir -p gh-pages-deploy/automation-framework
            echo "<!DOCTYPE html><html><head><title>Allure Reports - Automation Framework</title></head><body><h1>Allure Test Reports - Automation Framework</h1><p>Reports will be available after test execution.</p></body></html>" > gh-pages-deploy/automation-framework/index.html
          fi
          
          if [ -d "allure-reports/ai-test-generation-allure-report" ]; then
            echo "Copying ai-test-generation report..."
            cp -r allure-reports/ai-test-generation-allure-report gh-pages-deploy/ai-test-generation
          else
            echo "Creating placeholder for ai-test-generation..."
            mkdir -p gh-pages-deploy/ai-test-generation
            echo "<!DOCTYPE html><html><head><title>Allure Reports - AI Test Generation</title></head><body><h1>Allure Test Reports - AI Test Generation</h1><p>Reports will be available after test execution.</p></body></html>" > gh-pages-deploy/ai-test-generation/index.html
          fi
          
          if [ -d "allure-reports/cloud-native-app-allure-report" ]; then
            echo "Copying cloud-native-app report..."
            cp -r allure-reports/cloud-native-app-allure-report gh-pages-deploy/cloud-native-app
          else
            echo "Creating placeholder for cloud-native-app..."
            mkdir -p gh-pages-deploy/cloud-native-app
            echo "<!DOCTYPE html><html><head><title>Allure Reports - Cloud Native App</title></head><body><h1>Allure Test Reports - Cloud Native App</h1><p>Reports will be available after test execution.</p></body></html>" > gh-pages-deploy/cloud-native-app/index.html
          fi
          
          # Create main index page
          cat > gh-pages-deploy/index.html << 'EOF'
<!DOCTYPE html>
<html>
<head>
    <title>Allure Test Reports</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 40px; }
        .container { max-width: 800px; margin: 0 auto; }
        .module { margin: 20px 0; padding: 20px; border: 1px solid #ddd; border-radius: 5px; }
        .module h2 { color: #333; }
        .module a { color: #007bff; text-decoration: none; }
        .module a:hover { text-decoration: underline; }
    </style>
</head>
<body>
    <div class="container">
        <h1>Allure Test Reports</h1>
        <p>Interactive test reports generated from CI/CD pipeline test results.</p>
        
        <div class="module">
            <h2>Automation Framework</h2>
            <p>Test automation framework with Page Object pattern, GraphQL/REST API testing, and Pact contract testing.</p>
            <a href="automation-framework/">View Report</a>
        </div>
        
        <div class="module">
            <h2>AI Test Generation</h2>
            <p>AI-powered test generation using LLMs for automated test case creation.</p>
            <a href="ai-test-generation/">View Report</a>
        </div>
        
        <div class="module">
            <h2>Cloud Native App</h2>
            <p>AWS serverless demo with Lambda, API Gateway, DynamoDB, and Infrastructure as Code.</p>
            <a href="cloud-native-app/">View Report</a>
        </div>
        
        <hr>
        <p><small>Reports are automatically updated on every successful build of the main branch.</small></p>
    </div>
</body>
</html>
EOF

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: gh-pages-deploy

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
