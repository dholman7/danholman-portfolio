name: Deploy Allure Reports to GitHub Pages

on:
  workflow_run:
    workflows: ["Portfolio Test Suite with Coverage", "React Playwright Demo"]
    types: [completed]
    branches: [main]
  workflow_dispatch:
    inputs:
      module:
        type: choice
        options:
          - automation-framework
          - ai-rulesets
          - cloud-native-app
          - react-playwright-demo
          - all
        required: true
        default: all
        description: Module to deploy Allure report for

jobs:
  deploy-allure-reports:
    name: Deploy Allure Reports to GitHub Pages
    runs-on: ubuntu-latest
    if: (github.event.workflow_run.conclusion == 'success' || github.event.workflow_run.conclusion == 'failure') || github.event_name == 'workflow_dispatch'
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    permissions:
      contents: read
      pages: write
      id-token: write
    
    steps:
      - name: Debug workflow run info
        run: |
          echo "Workflow run event: ${{ github.event_name }}"
          echo "Workflow run conclusion: ${{ github.event.workflow_run.conclusion }}"
          echo "Workflow run name: ${{ github.event.workflow_run.name }}"
          echo "Workflow run status: ${{ github.event.workflow_run.status }}"
          
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Allure Reports
        uses: actions/download-artifact@v4
        with:
          pattern: "*-allure-report"
          path: allure-reports/
          merge-multiple: true
          
      - name: Debug artifact download
        run: |
          echo "=== Artifact Download Debug ==="
          echo "Allure reports directory after download:"
          ls -la allure-reports/ || echo "No allure-reports directory found"
          echo "Looking for specific artifacts:"
          for artifact in automation-framework-allure-report ai-rulesets-allure-report cloud-native-app-allure-report react-playwright-demo-allure-report; do
            echo "--- Looking for $artifact ---"
            if [ -d "allure-reports/$artifact" ]; then
              echo "Found $artifact directory"
              ls -la "allure-reports/$artifact/"
            else
              echo "NOT FOUND: $artifact"
            fi
          done
          
      - name: Debug downloaded artifacts
        run: |
          echo "=== Workflow Run Info ==="
          echo "Workflow run conclusion: ${{ github.event.workflow_run.conclusion }}"
          echo "Workflow run status: ${{ github.event.workflow_run.status }}"
          echo "Event name: ${{ github.event_name }}"
          
          echo "=== Downloaded Allure Reports Structure ==="
          find allure-reports/ -type f -name "*.html" | head -10 || echo "No HTML files found"
          echo "=== Allure Reports Directory Contents ==="
          ls -la allure-reports/ || echo "No allure-reports directory"
          echo "=== Individual Module Directories ==="
          for module in automation-framework ai-rulesets cloud-native-app react-playwright-demo; do
            echo "--- $module ---"
            ls -la allure-reports/${module}-allure-report/ 2>/dev/null || echo "No ${module}-allure-report directory found"
            if [ -d "allure-reports/${module}-allure-report" ]; then
              echo "Contents of ${module}-allure-report:"
              find allure-reports/${module}-allure-report -type f | head -10
            fi
          done
          
          echo "=== All Downloaded Artifacts ==="
          find . -name "*.zip" -o -name "*allure*" -o -name "*coverage*" | head -20
          
      - name: Download Playwright Reports
        uses: actions/download-artifact@v4
        with:
          pattern: "*-playwright-report"
          path: playwright-reports/
          merge-multiple: true
          
      - name: Debug All Downloaded Artifacts
        run: |
          echo "=== COMPREHENSIVE ARTIFACT DEBUG ==="
          echo "Current working directory: $(pwd)"
          echo "All files and directories in root:"
          ls -la
          
          echo "=== ALLURE REPORTS DEBUG ==="
          echo "Allure reports directory:"
          ls -la allure-reports/ || echo "No allure-reports directory found"
          if [ -d "allure-reports" ]; then
            echo "Allure reports contents:"
            find allure-reports -type f | head -20
            echo "Allure reports directory structure:"
            find allure-reports -type d | head -20
          fi
          
          echo "=== PLAYWRIGHT REPORTS DEBUG ==="
          echo "Playwright reports directory:"
          ls -la playwright-reports/ || echo "No playwright-reports directory found"
          if [ -d "playwright-reports" ]; then
            echo "Playwright reports contents:"
            find playwright-reports -type f | head -20
            echo "Playwright reports directory structure:"
            find playwright-reports -type d | head -20
          fi
          
          echo "=== COVERAGE REPORTS DEBUG ==="
          echo "Coverage reports directory:"
          ls -la coverage-reports/ || echo "No coverage-reports directory found"
          if [ -d "coverage-reports" ]; then
            echo "Coverage reports contents:"
            find coverage-reports -type f | head -20
            echo "Coverage reports directory structure:"
            find coverage-reports -type d | head -20
          fi
          
          echo "=== ALL DOWNLOADED ARTIFACTS ==="
          echo "Searching for all artifact-related files:"
          find . -name "*allure*" -o -name "*playwright*" -o -name "*coverage*" -o -name "*.html" -o -name "*.zip" | head -30
          
          echo "=== SPECIFIC ARTIFACT DIRECTORIES ==="
          for artifact in automation-framework-allure-report ai-rulesets-allure-report cloud-native-app-allure-report react-playwright-demo-allure-report react-playwright-demo-playwright-report; do
            echo "--- Checking for $artifact ---"
            if [ -d "allure-reports/$artifact" ]; then
              echo "Found in allure-reports: $artifact"
              ls -la "allure-reports/$artifact/"
            elif [ -d "playwright-reports/$artifact" ]; then
              echo "Found in playwright-reports: $artifact"
              ls -la "playwright-reports/$artifact/"
            elif [ -d "coverage-reports/$artifact" ]; then
              echo "Found in coverage-reports: $artifact"
              ls -la "coverage-reports/$artifact/"
            else
              echo "NOT FOUND: $artifact"
            fi
          done
          
      - name: Download Coverage Reports
        uses: actions/download-artifact@v4
        with:
          pattern: "*-coverage-report"
          path: coverage-reports/
          merge-multiple: true
          
      - name: Final Artifact State Debug
        run: |
          echo "=== FINAL ARTIFACT STATE AFTER ALL DOWNLOADS ==="
          echo "Current working directory: $(pwd)"
          echo "All directories in root:"
          ls -la
          
          echo "=== COMPLETE FILE TREE ==="
          echo "All files and directories (first 50):"
          find . -type f | head -50
          echo "All directories (first 30):"
          find . -type d | head -30
          
          echo "=== ARTIFACT SUMMARY ==="
          echo "Allure reports: $(find allure-reports -type f 2>/dev/null | wc -l) files"
          echo "Playwright reports: $(find playwright-reports -type f 2>/dev/null | wc -l) files"
          echo "Coverage reports: $(find coverage-reports -type f 2>/dev/null | wc -l) files"
          
          echo "=== HTML FILES FOUND ==="
          find . -name "*.html" | head -20
          
          echo "=== ZIP FILES FOUND ==="
          find . -name "*.zip" | head -10

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Setup Python for report combination
        uses: actions/setup-python@v4
        with:
          python-version: '3.13'

      - name: Prepare Allure Reports for Deployment
        run: |
          # Create deployment directory
          mkdir -p gh-pages-deploy
          
          echo "=== PRE-DEPLOYMENT DEBUG ==="
          echo "About to copy artifacts to gh-pages-deploy/"
          echo "Current working directory: $(pwd)"
          echo "Source directories that exist:"
          ls -la allure-reports/ playwright-reports/ coverage-reports/ 2>/dev/null || echo "Some directories missing"
          echo "Target deployment directory:"
          ls -la gh-pages-deploy/ || echo "Deployment directory not created yet"
          
          # Copy the main landing page
          if [ -f "docs/index.html" ]; then
            echo "Copying main landing page..."
            cp docs/index.html gh-pages-deploy/index.html
          else
            echo "Creating basic landing page..."
            cat > gh-pages-deploy/index.html << 'EOF'
          <!DOCTYPE html>
          <html>
          <head>
              <title>Test Results Dashboard</title>
              <style>
                  body { font-family: Arial, sans-serif; margin: 40px; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; }
                  .container { max-width: 800px; margin: 0 auto; text-align: center; }
                  .module { margin: 20px 0; padding: 20px; background: white; color: #333; border-radius: 10px; }
                  .module h2 { color: #2c3e50; }
                  .module a { color: #007bff; text-decoration: none; padding: 10px 20px; background: #007bff; color: white; border-radius: 5px; display: inline-block; margin: 5px; }
                  .module a:hover { background: #0056b3; }
              </style>
          </head>
          <body>
              <div class="container">
                  <h1>🧪 Test Results Dashboard</h1>
                  <p>Comprehensive test automation portfolio showcasing 10+ years of SDET expertise</p>
                  
                  <div class="module">
                      <h2>📊 Combined Test Results</h2>
                      <p>Unified Allure reports from all modules</p>
                      <a href="combined-allure/">View Combined Allure Report</a>
                  </div>
                  
                  <div class="module">
                      <h2>🤖 Automation Framework</h2>
                      <p>Python/TypeScript test automation framework</p>
                      <a href="automation-framework/">View Allure Report</a>
                      <a href="automation-framework/coverage/">View Coverage Report</a>
                  </div>
                  
                  <div class="module">
                      <h2>🧠 AI Rulesets</h2>
                      <p>AI-powered development standards and quality tools</p>
                      <a href="ai-rulesets/">View Allure Report</a>
                      <a href="ai-rulesets/coverage/">View Coverage Report</a>
                  </div>
                  
                  <div class="module">
                      <h2>☁️ Cloud Native App</h2>
                      <p>AWS serverless demo with Lambda and DynamoDB</p>
                      <a href="cloud-native-app/">View Allure Report</a>
                      <a href="cloud-native-app/coverage/">View Coverage Report</a>
                  </div>
                  
                  <div class="module">
                      <h2>⚛️ React Playwright Demo</h2>
                      <p>Modern React/TypeScript frontend with E2E testing</p>
                      <a href="react-playwright-demo/">View Allure Report</a>
                      <a href="react-playwright-demo/playwright/">View Playwright Report</a>
                      <a href="react-playwright-demo/coverage/">View Coverage Report</a>
                  </div>
                  
                  <p><small>Reports are automatically updated on every successful build of the main branch.</small></p>
              </div>
          </body>
          </html>
          EOF
          fi
          
          # Copy individual module reports
          if [ -d "allure-reports/automation-framework-allure-report" ]; then
            echo "Copying automation-framework report..."
            echo "=== DEBUG: automation-framework artifact structure ==="
            find allure-reports/automation-framework-allure-report -type f | head -20
            echo "=== DEBUG: Looking for specific paths ==="
            echo "Path 1: allure-reports/automation-framework-allure-report/automation-framework/reports/allure-report"
            ls -la allure-reports/automation-framework-allure-report/automation-framework/reports/allure-report/ 2>/dev/null || echo "Path 1 not found"
            echo "Path 2: allure-reports/automation-framework-allure-report/reports/allure-report"
            ls -la allure-reports/automation-framework-allure-report/reports/allure-report/ 2>/dev/null || echo "Path 2 not found"
            
            # The artifact contains the full path structure, so we need to find the actual report files
            if [ -d "allure-reports/automation-framework-allure-report/automation-framework/reports/allure-report" ]; then
              echo "Using Path 1: automation-framework/reports/allure-report"
              cp -r allure-reports/automation-framework-allure-report/automation-framework/reports/allure-report/* gh-pages-deploy/automation-framework/
            elif [ -d "allure-reports/automation-framework-allure-report/reports/allure-report" ]; then
              echo "Using Path 2: reports/allure-report"
              cp -r allure-reports/automation-framework-allure-report/reports/allure-report/* gh-pages-deploy/automation-framework/
            elif [ -d "allure-reports/automation-framework-allure-report" ]; then
              echo "Using Path 3: direct artifact contents"
              # The artifact might contain the files directly
              find allure-reports/automation-framework-allure-report -name "*.html" -exec cp {} gh-pages-deploy/automation-framework/ \;
              find allure-reports/automation-framework-allure-report -name "*.css" -exec cp {} gh-pages-deploy/automation-framework/ \;
              find allure-reports/automation-framework-allure-report -name "*.js" -exec cp {} gh-pages-deploy/automation-framework/ \;
              find allure-reports/automation-framework-allure-report -name "data" -type d -exec cp -r {} gh-pages-deploy/automation-framework/ \;
              find allure-reports/automation-framework-allure-report -name "widgets" -type d -exec cp -r {} gh-pages-deploy/automation-framework/ \;
              echo "Found files:"
              find allure-reports/automation-framework-allure-report -type f | head -10
            else
              echo "No valid path found, searching for HTML files..."
              # Try to find any HTML files in the artifact
              find allure-reports/automation-framework-allure-report -name "*.html" -exec cp {} gh-pages-deploy/automation-framework/ \;
              echo "Found HTML files:"
              find allure-reports/automation-framework-allure-report -name "*.html"
            fi
            echo "Automation framework report copied successfully"
            echo "=== DEBUG: Final automation-framework directory ==="
            ls -la gh-pages-deploy/automation-framework/
          else
            echo "Creating placeholder for automation-framework..."
            mkdir -p gh-pages-deploy/automation-framework
            echo "<!DOCTYPE html><html><head><title>Allure Reports - Automation Framework</title></head><body><h1>Allure Test Reports - Automation Framework</h1><p>Reports will be available after test execution.</p><p>Debug: No automation-framework-allure-report directory found in allure-reports/</p></body></html>" > gh-pages-deploy/automation-framework/index.html
          fi
          
          if [ -d "allure-reports/ai-rulesets-allure-report" ]; then
            echo "Copying ai-rulesets report..."
            echo "=== DEBUG: ai-rulesets artifact structure ==="
            find allure-reports/ai-rulesets-allure-report -type f | head -20
            echo "=== DEBUG: Looking for specific paths ==="
            echo "Path 1: allure-reports/ai-rulesets-allure-report/ai-rulesets/reports/allure-report"
            ls -la allure-reports/ai-rulesets-allure-report/ai-rulesets/reports/allure-report/ 2>/dev/null || echo "Path 1 not found"
            echo "Path 2: allure-reports/ai-rulesets-allure-report/reports/allure-report"
            ls -la allure-reports/ai-rulesets-allure-report/reports/allure-report/ 2>/dev/null || echo "Path 2 not found"
            
            # The artifact contains the full path structure, so we need to find the actual report files
            if [ -d "allure-reports/ai-rulesets-allure-report/ai-rulesets/reports/allure-report" ]; then
              echo "Using Path 1: ai-rulesets/reports/allure-report"
              cp -r allure-reports/ai-rulesets-allure-report/ai-rulesets/reports/allure-report/* gh-pages-deploy/ai-rulesets/
            elif [ -d "allure-reports/ai-rulesets-allure-report/reports/allure-report" ]; then
              echo "Using Path 2: reports/allure-report"
              cp -r allure-reports/ai-rulesets-allure-report/reports/allure-report/* gh-pages-deploy/ai-rulesets/
            elif [ -d "allure-reports/ai-rulesets-allure-report" ]; then
              echo "Using Path 3: direct artifact contents"
              # The artifact might contain the files directly
              find allure-reports/ai-rulesets-allure-report -name "*.html" -exec cp {} gh-pages-deploy/ai-rulesets/ \;
              find allure-reports/ai-rulesets-allure-report -name "*.css" -exec cp {} gh-pages-deploy/ai-rulesets/ \;
              find allure-reports/ai-rulesets-allure-report -name "*.js" -exec cp {} gh-pages-deploy/ai-rulesets/ \;
              find allure-reports/ai-rulesets-allure-report -name "data" -type d -exec cp -r {} gh-pages-deploy/ai-rulesets/ \;
              find allure-reports/ai-rulesets-allure-report -name "widgets" -type d -exec cp -r {} gh-pages-deploy/ai-rulesets/ \;
              echo "Found files:"
              find allure-reports/ai-rulesets-allure-report -type f | head -10
            else
              echo "No valid path found, searching for HTML files..."
              # Try to find any HTML files in the artifact
              find allure-reports/ai-rulesets-allure-report -name "*.html" -exec cp {} gh-pages-deploy/ai-rulesets/ \;
              echo "Found HTML files:"
              find allure-reports/ai-rulesets-allure-report -name "*.html"
            fi
            echo "AI rulesets report copied successfully"
            echo "=== DEBUG: Final ai-rulesets directory ==="
            ls -la gh-pages-deploy/ai-rulesets/
          else
            echo "Creating placeholder for ai-rulesets..."
            mkdir -p gh-pages-deploy/ai-rulesets
            echo "<!DOCTYPE html><html><head><title>Allure Reports - AI Rulesets</title></head><body><h1>Allure Test Reports - AI Rulesets</h1><p>Reports will be available after test execution.</p><p>Debug: No ai-rulesets-allure-report directory found in allure-reports/</p></body></html>" > gh-pages-deploy/ai-rulesets/index.html
          fi
          
          if [ -d "allure-reports/cloud-native-app-allure-report" ]; then
            echo "Copying cloud-native-app report..."
            echo "=== DEBUG: cloud-native-app artifact structure ==="
            find allure-reports/cloud-native-app-allure-report -type f | head -20
            echo "=== DEBUG: Looking for specific paths ==="
            echo "Path 1: allure-reports/cloud-native-app-allure-report/cloud-native-app/reports/allure-report"
            ls -la allure-reports/cloud-native-app-allure-report/cloud-native-app/reports/allure-report/ 2>/dev/null || echo "Path 1 not found"
            echo "Path 2: allure-reports/cloud-native-app-allure-report/reports/allure-report"
            ls -la allure-reports/cloud-native-app-allure-report/reports/allure-report/ 2>/dev/null || echo "Path 2 not found"
            
            # The artifact contains the full path structure, so we need to find the actual report files
            if [ -d "allure-reports/cloud-native-app-allure-report/cloud-native-app/reports/allure-report" ]; then
              echo "Using Path 1: cloud-native-app/reports/allure-report"
              cp -r allure-reports/cloud-native-app-allure-report/cloud-native-app/reports/allure-report/* gh-pages-deploy/cloud-native-app/
            elif [ -d "allure-reports/cloud-native-app-allure-report/reports/allure-report" ]; then
              echo "Using Path 2: reports/allure-report"
              cp -r allure-reports/cloud-native-app-allure-report/reports/allure-report/* gh-pages-deploy/cloud-native-app/
            elif [ -d "allure-reports/cloud-native-app-allure-report" ]; then
              echo "Using Path 3: direct artifact contents"
              # The artifact might contain the files directly
              find allure-reports/cloud-native-app-allure-report -name "*.html" -exec cp {} gh-pages-deploy/cloud-native-app/ \;
              find allure-reports/cloud-native-app-allure-report -name "*.css" -exec cp {} gh-pages-deploy/cloud-native-app/ \;
              find allure-reports/cloud-native-app-allure-report -name "*.js" -exec cp {} gh-pages-deploy/cloud-native-app/ \;
              find allure-reports/cloud-native-app-allure-report -name "data" -type d -exec cp -r {} gh-pages-deploy/cloud-native-app/ \;
              find allure-reports/cloud-native-app-allure-report -name "widgets" -type d -exec cp -r {} gh-pages-deploy/cloud-native-app/ \;
              echo "Found files:"
              find allure-reports/cloud-native-app-allure-report -type f | head -10
            else
              echo "No valid path found, searching for HTML files..."
              # Try to find any HTML files in the artifact
              find allure-reports/cloud-native-app-allure-report -name "*.html" -exec cp {} gh-pages-deploy/cloud-native-app/ \;
              echo "Found HTML files:"
              find allure-reports/cloud-native-app-allure-report -name "*.html"
            fi
            echo "Cloud native app report copied successfully"
            echo "=== DEBUG: Final cloud-native-app directory ==="
            ls -la gh-pages-deploy/cloud-native-app/
          else
            echo "Creating placeholder for cloud-native-app..."
            mkdir -p gh-pages-deploy/cloud-native-app
            echo "<!DOCTYPE html><html><head><title>Allure Reports - Cloud Native App</title></head><body><h1>Allure Test Reports - Cloud Native App</h1><p>Reports will be available after test execution.</p><p>Debug: No cloud-native-app-allure-report directory found in allure-reports/</p></body></html>" > gh-pages-deploy/cloud-native-app/index.html
          fi
          
          if [ -d "allure-reports/react-playwright-demo-allure-report" ]; then
            echo "Copying react-playwright-demo report..."
            echo "=== DEBUG: react-playwright-demo artifact structure ==="
            find allure-reports/react-playwright-demo-allure-report -type f | head -20
            echo "=== DEBUG: Looking for specific paths ==="
            echo "Path 1: allure-reports/react-playwright-demo-allure-report/react-playwright-demo/allure-report"
            ls -la allure-reports/react-playwright-demo-allure-report/react-playwright-demo/allure-report/ 2>/dev/null || echo "Path 1 not found"
            echo "Path 2: allure-reports/react-playwright-demo-allure-report/allure-report"
            ls -la allure-reports/react-playwright-demo-allure-report/allure-report/ 2>/dev/null || echo "Path 2 not found"
            
            # The artifact contains the full path structure, so we need to find the actual report files
            if [ -d "allure-reports/react-playwright-demo-allure-report/react-playwright-demo/allure-report" ]; then
              echo "Using Path 1: react-playwright-demo/allure-report"
              cp -r allure-reports/react-playwright-demo-allure-report/react-playwright-demo/allure-report/* gh-pages-deploy/react-playwright-demo/
            elif [ -d "allure-reports/react-playwright-demo-allure-report/allure-report" ]; then
              echo "Using Path 2: allure-report"
              cp -r allure-reports/react-playwright-demo-allure-report/allure-report/* gh-pages-deploy/react-playwright-demo/
            elif [ -d "allure-reports/react-playwright-demo-allure-report" ]; then
              echo "Using Path 3: direct artifact contents"
              # The artifact might contain the files directly
              find allure-reports/react-playwright-demo-allure-report -name "*.html" -exec cp {} gh-pages-deploy/react-playwright-demo/ \;
              find allure-reports/react-playwright-demo-allure-report -name "*.css" -exec cp {} gh-pages-deploy/react-playwright-demo/ \;
              find allure-reports/react-playwright-demo-allure-report -name "*.js" -exec cp {} gh-pages-deploy/react-playwright-demo/ \;
              find allure-reports/react-playwright-demo-allure-report -name "data" -type d -exec cp -r {} gh-pages-deploy/react-playwright-demo/ \;
              find allure-reports/react-playwright-demo-allure-report -name "widgets" -type d -exec cp -r {} gh-pages-deploy/react-playwright-demo/ \;
              echo "Found files:"
              find allure-reports/react-playwright-demo-allure-report -type f | head -10
            else
              echo "No valid path found, searching for HTML files..."
              # Try to find any HTML files in the artifact
              find allure-reports/react-playwright-demo-allure-report -name "*.html" -exec cp {} gh-pages-deploy/react-playwright-demo/ \;
              echo "Found HTML files:"
              find allure-reports/react-playwright-demo-allure-report -name "*.html"
            fi
            echo "React Playwright demo report copied successfully"
            echo "=== DEBUG: Final react-playwright-demo directory ==="
            ls -la gh-pages-deploy/react-playwright-demo/
          else
            echo "Creating placeholder for react-playwright-demo..."
            mkdir -p gh-pages-deploy/react-playwright-demo
            echo "<!DOCTYPE html><html><head><title>Allure Reports - React Playwright Demo</title></head><body><h1>Allure Test Reports - React Playwright Demo</h1><p>Reports will be available after test execution.</p><p>Debug: No react-playwright-demo-allure-report directory found in allure-reports/</p></body></html>" > gh-pages-deploy/react-playwright-demo/index.html
          fi
          
          # Copy Playwright reports
          echo "=== DEBUG: Playwright reports structure ==="
          ls -la playwright-reports/ || echo "No playwright-reports directory found"
          if [ -d "playwright-reports" ]; then
            echo "Found playwright-reports directory"
            find playwright-reports -type f | head -10
            echo "Copying Playwright reports..."
            
            # Check for specific artifact structure
            if [ -d "playwright-reports/react-playwright-demo-playwright-report" ]; then
              echo "Using nested artifact structure: playwright-reports/react-playwright-demo-playwright-report"
              cp -r playwright-reports/react-playwright-demo-playwright-report/* gh-pages-deploy/playwright-reports/ 2>/dev/null || true
              # Also copy to react-playwright-demo/playwright for direct access
              mkdir -p gh-pages-deploy/react-playwright-demo/playwright
              cp -r playwright-reports/react-playwright-demo-playwright-report/* gh-pages-deploy/react-playwright-demo/playwright/ 2>/dev/null || true
            else
              echo "Using direct artifact structure: playwright-reports/"
              cp -r playwright-reports/* gh-pages-deploy/playwright-reports/ 2>/dev/null || true
              # Also copy to react-playwright-demo/playwright for direct access
              mkdir -p gh-pages-deploy/react-playwright-demo/playwright
              cp -r playwright-reports/* gh-pages-deploy/react-playwright-demo/playwright/ 2>/dev/null || true
            fi
            
            echo "=== DEBUG: Copied Playwright reports ==="
            ls -la gh-pages-deploy/playwright-reports/
            ls -la gh-pages-deploy/react-playwright-demo/playwright/
          else
            echo "Creating placeholder for Playwright reports..."
            mkdir -p gh-pages-deploy/playwright-reports
            mkdir -p gh-pages-deploy/react-playwright-demo/playwright
            echo "<!DOCTYPE html><html><head><title>Playwright Reports</title></head><body><h1>Playwright Test Reports</h1><p>Reports will be available after test execution.</p><p>Debug: No playwright-reports directory found</p></body></html>" > gh-pages-deploy/playwright-reports/index.html
            echo "<!DOCTYPE html><html><head><title>Playwright Reports</title></head><body><h1>Playwright Test Reports</h1><p>Reports will be available after test execution.</p><p>Debug: No playwright-reports directory found</p></body></html>" > gh-pages-deploy/react-playwright-demo/playwright/index.html
          fi
          
          # Copy Coverage reports
          if [ -d "coverage-reports" ]; then
            echo "Copying Coverage reports..."
            cp -r coverage-reports gh-pages-deploy/coverage-reports
            # Also copy individual module coverage reports
            for module in automation-framework ai-rulesets cloud-native-app react-playwright-demo; do
              if [ -d "coverage-reports/${module}-coverage-report" ]; then
                mkdir -p gh-pages-deploy/${module}/coverage
                # Handle the nested path structure in artifacts
                if [ -d "coverage-reports/${module}-coverage-report/${module}/reports/coverage" ]; then
                  cp -r coverage-reports/${module}-coverage-report/${module}/reports/coverage/* gh-pages-deploy/${module}/coverage/ 2>/dev/null || true
                elif [ -d "coverage-reports/${module}-coverage-report/reports/coverage" ]; then
                  cp -r coverage-reports/${module}-coverage-report/reports/coverage/* gh-pages-deploy/${module}/coverage/ 2>/dev/null || true
                else
                  # Try to find any HTML files in the coverage artifact
                  find coverage-reports/${module}-coverage-report -name "*.html" -exec cp {} gh-pages-deploy/${module}/coverage/ \; 2>/dev/null || true
                fi
                echo "Copied coverage report for ${module}"
              else
                echo "No coverage report found for ${module}, creating placeholder..."
                mkdir -p gh-pages-deploy/${module}/coverage
                echo "<!DOCTYPE html><html><head><title>Coverage Reports - ${module}</title></head><body><h1>Code Coverage Reports - ${module}</h1><p>Coverage reports will be available after test execution.</p><p>Debug: No ${module}-coverage-report directory found in coverage-reports/</p></body></html>" > gh-pages-deploy/${module}/coverage/index.html
              fi
            done
          else
            echo "Creating placeholder for Coverage reports..."
            mkdir -p gh-pages-deploy/coverage-reports
            echo "<!DOCTYPE html><html><head><title>Coverage Reports</title></head><body><h1>Code Coverage Reports</h1><p>Reports will be available after test execution.</p></body></html>" > gh-pages-deploy/coverage-reports/index.html
            # Create placeholders for each module
            for module in automation-framework ai-rulesets cloud-native-app react-playwright-demo; do
              mkdir -p gh-pages-deploy/${module}/coverage
              echo "<!DOCTYPE html><html><head><title>Coverage Reports - ${module}</title></head><body><h1>Code Coverage Reports - ${module}</h1><p>Coverage reports will be available after test execution.</p></body></html>" > gh-pages-deploy/${module}/coverage/index.html
            done
          fi
          
          # Create combined Allure report
          echo "Creating combined Allure report..."
          mkdir -p gh-pages-deploy/combined-allure
          
          # Collect all Allure results directories
          ALLURE_RESULTS_DIRS=""
          for module in automation-framework ai-rulesets cloud-native-app react-playwright-demo; do
            if [ -d "allure-reports/${module}-allure-report" ]; then
              # Extract results from the report directory
              RESULTS_DIR="allure-reports/${module}-allure-report"
              if [ -d "${RESULTS_DIR}/data/test-cases" ]; then
                ALLURE_RESULTS_DIRS="${ALLURE_RESULTS_DIRS} ${RESULTS_DIR}/data/test-cases"
              fi
            fi
          done
          
          # If we have Allure results, combine them
          if [ -n "$ALLURE_RESULTS_DIRS" ]; then
            echo "Combining Allure results from: $ALLURE_RESULTS_DIRS"
            python3 scripts/combine-allure-reports.py --sources $ALLURE_RESULTS_DIRS --output gh-pages-deploy/combined-allure-results --summary gh-pages-deploy/combined-summary.json
            
            # Generate combined Allure report if Allure is available
            if command -v allure >/dev/null 2>&1; then
              allure generate gh-pages-deploy/combined-allure-results --clean -o gh-pages-deploy/combined-allure
              echo "Combined Allure report generated"
            else
              echo "Allure not available, creating placeholder for combined report"
              echo "<!DOCTYPE html><html><head><title>Combined Allure Report</title></head><body><h1>Combined Allure Test Report</h1><p>Combined test results from all modules. Allure commandline required to generate full report.</p><p>Run: allure generate combined-allure-results --clean -o combined-allure</p></body></html>" > gh-pages-deploy/combined-allure/index.html
            fi
          else
            echo "No Allure results found, creating placeholder"
            echo "<!DOCTYPE html><html><head><title>Combined Allure Report</title></head><body><h1>Combined Allure Test Report</h1><p>Reports will be available after test execution.</p></body></html>" > gh-pages-deploy/combined-allure/index.html
          fi
          
          # Create combined coverage report placeholder
          echo "Creating combined coverage report..."
          mkdir -p gh-pages-deploy/combined-coverage
          echo "<!DOCTYPE html><html><head><title>Combined Coverage Report</title></head><body><h1>Combined Code Coverage Report</h1><p>Combined coverage analysis from all modules will be available after test execution.</p></body></html>" > gh-pages-deploy/combined-coverage/index.html

      - name: Post-Deployment Debug
        run: |
          echo "=== POST-DEPLOYMENT DEBUG ==="
          echo "Final deployment directory structure:"
          find gh-pages-deploy -type f | head -50
          echo "Deployment directory size:"
          du -sh gh-pages-deploy/
          echo "Key directories in deployment:"
          ls -la gh-pages-deploy/
          echo "Module-specific directories:"
          for module in automation-framework ai-rulesets cloud-native-app react-playwright-demo; do
            echo "--- $module ---"
            ls -la gh-pages-deploy/$module/ 2>/dev/null || echo "No $module directory"
          done
          echo "Playwright reports in deployment:"
          ls -la gh-pages-deploy/playwright-reports/ 2>/dev/null || echo "No playwright-reports directory"
          echo "Coverage reports in deployment:"
          ls -la gh-pages-deploy/coverage-reports/ 2>/dev/null || echo "No coverage-reports directory"
          echo "HTML files in deployment:"
          find gh-pages-deploy -name "*.html" | head -20

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: gh-pages-deploy

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
