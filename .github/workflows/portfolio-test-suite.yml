name: Portfolio Test Suite

on:
  push:
    branches: [ main ]
    paths:
      - 'automation-framework/**'
      - 'cloud-native-app/**'
      - 'ai-rulesets/**'
      - 'react-playwright-demo/**'
      - '.github/workflows/**'
      - 'Makefile'
  pull_request:
    paths:
      - 'automation-framework/**'
      - 'cloud-native-app/**'
      - 'ai-rulesets/**'
      - 'react-playwright-demo/**'
      - '.github/workflows/**'
      - 'Makefile'
  workflow_dispatch:
    inputs:
      module:
        type: choice
        options:
          - all
          - automation-framework
          - ai-rulesets
          - cloud-native-app
          - react-playwright-demo
        required: true
        default: all
        description: Module to test (or 'all' for complete test suite)
      test_type:
        type: choice
        options:
          - all
          - unit
          - component
          - integration
          - e2e
          - performance
        required: true
        default: all
        description: Type of tests to run
      include_allure:
        type: boolean
        required: false
        default: true
        description: Generate Allure reports

jobs:
  automation-framework:
    name: Automation Framework (Python)
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.module == 'all' || github.event.inputs.module == 'automation-framework' || github.event_name != 'workflow_dispatch' }}
    defaults:
      run:
        working-directory: automation-framework
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.13'
      - run: |
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f pyproject.toml ]; then pip install -e ".[test]"; fi
          # Install Allure dependencies
          pip install allure-pytest allure-python-commons
      - run: |
          if command -v ruff >/dev/null 2>&1; then ruff check . || true; fi
          if command -v black >/dev/null 2>&1; then black --check . || true; fi
      - name: Run Tests with Allure Results
        if: always()
        run: |
          # Create reports directory
          mkdir -p reports/allure-results
          
          # Run tests based on test_type input
          echo "Running tests for type: ${{ github.event.inputs.test_type || 'all' }}"
          if [ "${{ github.event.inputs.test_type || 'all' }}" = "all" ] || [ "${{ github.event_name }}" != "workflow_dispatch" ]; then
            echo "Running all tests..."
            make test || true
          elif [ "${{ github.event.inputs.test_type }}" = "unit" ]; then
            echo "Running unit tests..."
            make test-unit || true
          elif [ "${{ github.event.inputs.test_type }}" = "component" ]; then
            echo "Running component tests..."
            make test-component || true
          elif [ "${{ github.event.inputs.test_type }}" = "integration" ]; then
            echo "Running integration tests..."
            make test-integration || true
          elif [ "${{ github.event.inputs.test_type }}" = "e2e" ]; then
            echo "Running e2e tests..."
            make test-e2e || true
          elif [ "${{ github.event.inputs.test_type }}" = "performance" ]; then
            echo "Running performance tests..."
            make test-performance || true
          fi
          
          # List generated files for debugging
          echo "Allure results directory contents:"
          ls -la reports/allure-results/ || echo "No Allure results generated"
          echo "Reports directory structure:"
          find reports/ -type f -name "*.json" | head -10 || echo "No JSON files found"
          echo "Allure results file count:"
          find reports/allure-results/ -name "*.json" | wc -l || echo "0"
          echo "Sample Allure result files:"
          find reports/allure-results/ -name "*.json" | head -5 || echo "No Allure JSON files found"
      - name: Generate Allure Report
        if: always()
        run: |
          if [ -d "reports/allure-results" ] && [ "$(ls -A reports/allure-results)" ]; then
            echo "Installing Allure commandline..."
            # Install Allure using npm (more reliable than yarn global)
            npm install -g allure-commandline
            echo "Generating Allure report for automation-framework..."
            allure generate reports/allure-results --clean -o reports/allure-report
            echo "Allure report generated successfully"
            # Verify the report was created
            if [ -d "reports/allure-report" ]; then
              echo "Allure report directory created successfully"
              ls -la reports/allure-report/
            else
              echo "ERROR: Allure report directory was not created"
            fi
          else
            echo "No Allure results found for automation-framework"
          fi

      - name: Upload Allure Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: automation-framework-allure-results
          path: reports/allure-results/
          retention-days: 30
          if-no-files-found: warn

      - name: Upload Allure Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: automation-framework-allure-report
          path: reports/allure-report/
          retention-days: 30
          if-no-files-found: warn

  ai-rulesets:
    name: AI Rulesets (Python)
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.module == 'all' || github.event.inputs.module == 'ai-rulesets' || github.event_name != 'workflow_dispatch' }}
    defaults:
      run:
        working-directory: ai-rulesets
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.13'
      - run: |
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f pyproject.toml ]; then pip install -e ".[dev]"; fi
          # Install Allure dependencies
          pip install allure-pytest allure-python-commons
      - run: |
          if command -v ruff >/dev/null 2>&1; then ruff check . || true; fi
          if command -v black >/dev/null 2>&1; then black --check . || true; fi
      - name: Run Tests with Allure Results
        if: always()
        run: |
          # Create reports directory
          mkdir -p reports/allure-results
          
          # Run tests based on test_type input
          echo "Running tests for type: ${{ github.event.inputs.test_type || 'all' }}"
          if [ "${{ github.event.inputs.test_type || 'all' }}" = "all" ] || [ "${{ github.event_name }}" != "workflow_dispatch" ]; then
            echo "Running all tests..."
            make test || true
          elif [ "${{ github.event.inputs.test_type }}" = "unit" ]; then
            echo "Running unit tests..."
            make test-unit || true
          elif [ "${{ github.event.inputs.test_type }}" = "component" ]; then
            echo "Running component tests..."
            make test-component || true
          elif [ "${{ github.event.inputs.test_type }}" = "integration" ]; then
            echo "Running integration tests..."
            make test-integration || true
          elif [ "${{ github.event.inputs.test_type }}" = "e2e" ]; then
            echo "Running e2e tests..."
            make test-e2e || true
          elif [ "${{ github.event.inputs.test_type }}" = "performance" ]; then
            echo "Running performance tests..."
            make test-performance || true
          fi
          
          # List generated files for debugging
          echo "Allure results directory contents:"
          ls -la reports/allure-results/ || echo "No Allure results generated"
          echo "Reports directory structure:"
          find reports/ -type f -name "*.json" | head -10 || echo "No JSON files found"
          echo "Allure results file count:"
          find reports/allure-results/ -name "*.json" | wc -l || echo "0"
          echo "Sample Allure result files:"
          find reports/allure-results/ -name "*.json" | head -5 || echo "No Allure JSON files found"
      - name: Generate Allure Report
        if: always()
        run: |
          if [ -d "reports/allure-results" ] && [ "$(ls -A reports/allure-results)" ]; then
            echo "Installing Allure commandline..."
            # Install Allure using npm (more reliable than yarn global)
            npm install -g allure-commandline
            echo "Generating Allure report for ai-rulesets..."
            allure generate reports/allure-results --clean -o reports/allure-report
            echo "Allure report generated successfully"
            # Verify the report was created
            if [ -d "reports/allure-report" ]; then
              echo "Allure report directory created successfully"
              ls -la reports/allure-report/
            else
              echo "ERROR: Allure report directory was not created"
            fi
          else
            echo "No Allure results found for ai-rulesets"
          fi

      - name: Upload Allure Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ai-rulesets-allure-results
          path: reports/allure-results/
          retention-days: 30
          if-no-files-found: warn

      - name: Upload Allure Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ai-rulesets-allure-report
          path: reports/allure-report/
          retention-days: 30
          if-no-files-found: warn

  cloud-native-app:
    name: Cloud Native App (TypeScript/Python)
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.module == 'all' || github.event.inputs.module == 'cloud-native-app' || github.event_name != 'workflow_dispatch' }}
    defaults:
      run:
        working-directory: cloud-native-app
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.13'
      - uses: actions/setup-node@v4
        with:
          node-version: '18'
      - run: |
          # Install Node.js dependencies
          if [ -f package.json ]; then yarn install; fi
          # Install Python dependencies for regression tests
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install pytest allure-pytest allure-python-commons
      - run: |
          if command -v yarn >/dev/null 2>&1; then yarn lint || true; fi
          if command -v ruff >/dev/null 2>&1; then ruff check . || true; fi
      - name: Run Tests with Allure Results
        if: always()
        run: |
          # Create reports directory
          mkdir -p reports/allure-results
          
          # Run Python tests with proper pytest configuration
          echo "Running pytest with Allure reporting..."
          pytest --alluredir=reports/allure-results -v --tb=short || true
          
          # Run TypeScript/Jest tests (without Allure for now)
          if [ -f package.json ] && command -v yarn >/dev/null 2>&1; then
            echo "Running TypeScript/Jest tests..."
            yarn test --coverage || true
          fi
          
          # List generated files for debugging
          echo "Allure results directory contents:"
          ls -la reports/allure-results/ || echo "No Allure results generated"
          echo "Reports directory structure:"
          find reports/ -type f -name "*.json" | head -10 || echo "No JSON files found"
          echo "Allure results file count:"
          find reports/allure-results/ -name "*.json" | wc -l || echo "0"
          echo "Sample Allure result files:"
          find reports/allure-results/ -name "*.json" | head -5 || echo "No Allure JSON files found"
      - name: Generate Allure Report
        if: always()
        run: |
          if [ -d "reports/allure-results" ] && [ "$(ls -A reports/allure-results)" ]; then
            echo "Installing Allure commandline..."
            # Install Allure using npm (more reliable than yarn global)
            npm install -g allure-commandline
            echo "Generating Allure report for cloud-native-app..."
            allure generate reports/allure-results --clean -o reports/allure-report
            echo "Allure report generated successfully"
            # Verify the report was created
            if [ -d "reports/allure-report" ]; then
              echo "Allure report directory created successfully"
              ls -la reports/allure-report/
            else
              echo "ERROR: Allure report directory was not created"
            fi
          else
            echo "No Allure results found for cloud-native-app"
          fi

      - name: Upload Allure Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: cloud-native-app-allure-results
          path: reports/allure-results/
          retention-days: 30
          if-no-files-found: warn

      - name: Upload Allure Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: cloud-native-app-allure-report
          path: reports/allure-report/
          retention-days: 30
          if-no-files-found: warn

  react-playwright-demo:
    name: React Playwright Demo (TypeScript/React)
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.module == 'all' || github.event.inputs.module == 'react-playwright-demo' || github.event_name != 'workflow_dispatch' }}
    defaults:
      run:
        working-directory: react-playwright-demo
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20.19.0'
      - run: yarn install --frozen-lockfile
      - run: yarn type-check
      - run: yarn lint
      - run: yarn build
      - name: Run Unit Tests
        if: ${{ github.event.inputs.test_type == 'all' || github.event.inputs.test_type == 'unit' || github.event_name != 'workflow_dispatch' }}
        run: yarn test:coverage
      - name: Run Component Tests
        if: ${{ github.event.inputs.test_type == 'component' }}
        run: |
          echo "Component tests not yet implemented for react-playwright-demo"
          echo "Available test types: unit, integration, e2e"
          exit 0
      - name: Run Integration Tests
        if: ${{ github.event.inputs.test_type == 'all' || github.event.inputs.test_type == 'integration' || github.event_name != 'workflow_dispatch' }}
        run: yarn test:integration
      - name: Run Playwright Tests
        if: ${{ github.event.inputs.test_type == 'all' || github.event.inputs.test_type == 'e2e' || github.event_name != 'workflow_dispatch' }}
        run: yarn test:e2e
      - name: Run Performance Tests
        if: ${{ github.event.inputs.test_type == 'performance' }}
        run: |
          echo "Performance tests not yet implemented for react-playwright-demo"
          echo "Available test types: unit, integration, e2e"
          exit 0
      - name: Generate Allure Report
        if: ${{ github.event.inputs.include_allure != false }}
        run: yarn test:allure:generate
      - name: Upload Playwright HTML Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: react-playwright-demo-playwright-report
          path: playwright-report/
          retention-days: 30
          if-no-files-found: warn
      - name: Upload Allure Report
        if: always() && ${{ github.event.inputs.include_allure != false }}
        uses: actions/upload-artifact@v4
        with:
          name: react-playwright-demo-allure-report
          path: allure-report/
          retention-days: 30
          if-no-files-found: warn
      - name: Upload Coverage Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: react-playwright-demo-coverage-report
          path: coverage/
          retention-days: 30
          if-no-files-found: warn

