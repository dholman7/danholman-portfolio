name: React Playwright Demo - PR Preview

on:
  pull_request:
    paths:
      - 'react-playwright-demo/**'
    types: [opened, synchronize, reopened]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: 'react-playwright-demo/package-lock.json'
        
    - name: Install dependencies
      working-directory: ./react-playwright-demo
      run: npm ci
      
    - name: Type check
      working-directory: ./react-playwright-demo
      run: npm run type-check
      
    - name: Lint code
      working-directory: ./react-playwright-demo
      run: npm run lint
      
    - name: Build application
      working-directory: ./react-playwright-demo
      run: npm run build
      
    - name: Run unit tests
      working-directory: ./react-playwright-demo
      run: npm run test:coverage
      
    - name: Run Playwright tests
      working-directory: ./react-playwright-demo
      run: npm run test:e2e
      
    - name: Generate Allure report
      working-directory: ./react-playwright-demo
      run: npm run test:allure:generate
      
    - name: Upload Playwright HTML report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: react-playwright-demo-playwright-report
        path: react-playwright-demo/playwright-report/
        retention-days: 30
        
    - name: Upload Allure report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: react-playwright-demo-allure-report
        path: react-playwright-demo/allure-report/
        retention-days: 30
        
    - name: Upload coverage report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: react-playwright-demo-coverage-report
        path: react-playwright-demo/coverage/
        retention-days: 30
      
    - name: Deploy to Vercel
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        working-directory: ./react-playwright-demo
        scope: ${{ secrets.VERCEL_ORG_ID }}
        
    - name: Comment PR with preview URL
      uses: actions/github-script@v7
      if: success()
      with:
        script: |
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          
          const botComment = comments.find(comment => 
            comment.user.type === 'Bot' && 
            comment.body.includes('ðŸš€ **React Playwright Demo Preview**')
          );
          
          const previewUrl = process.env.VERCEL_URL ? `https://${process.env.VERCEL_URL}` : 'Preview URL will be available shortly';
          
          const commentBody = `## ðŸš€ **React Playwright Demo Preview**
          
          **Preview URL:** ${previewUrl}
          
          ### ðŸ“‹ **What's Changed**
          - React Playwright Demo application updated
          - Modern registration/sign-up interface
          - Ready for Playwright testing
          
          ### ðŸ§ª **Testing**
          The application includes comprehensive test selectors for Playwright:
          - Form inputs: \`data-testid\` attributes
          - Buttons: \`data-testid\` attributes  
          - Error messages: \`data-testid\` attributes
          
          ### ðŸ”— **Quick Links**
          - [Source Code](https://github.com/${context.repo.owner}/${context.repo.repo}/tree/main/react-playwright-demo)
          - [Playwright Test Examples](https://github.com/${context.repo.owner}/${context.repo.repo}/blob/main/react-playwright-demo/README.md#playwright-testing)
          
          ---
          *This preview is automatically generated for PR #${context.issue.number}*`;
          
          if (botComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: commentBody
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: commentBody
            });
          }
      env:
        VERCEL_URL: ${{ steps.deploy.outputs.preview-url }}
