# Deploy Test Results Dashboard to GitHub Pages
name: Deploy Test Results Dashboard to Pages

on:
  # Run on pushes to main (when test suite generates artifacts)
  push:
    branches: ["main"]
    paths:
      - 'automation-framework/**'
      - 'cloud-native-app/**'
      - 'ai-rulesets/**'
      - 'react-playwright-demo/**'
      - '.github/workflows/**'
      - 'docs/**'
      - 'scripts/**'
      - 'Makefile'
      - 'README.md'

  # Also run on pull requests for previews
  pull_request:
    branches: ["main"]
    paths:
      - 'automation-framework/**'
      - 'cloud-native-app/**'
      - 'ai-rulesets/**'
      - 'react-playwright-demo/**'
      - '.github/workflows/**'
      - 'docs/**'
      - 'scripts/**'
      - 'Makefile'
      - 'README.md'

  # Allow manual trigger for testing
  workflow_dispatch:

  # Allow being called as a reusable workflow
  workflow_call:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Deploy test results dashboard
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    # Run on push to main, PRs, or manual dispatch
    if: github.event_name == 'push' || github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          # For PRs, checkout the PR branch; for push/manual dispatch, checkout the current branch
          ref: ${{ github.event_name == 'pull_request' && github.head_ref || github.ref }}

      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Download Allure Reports
        uses: actions/download-artifact@v4
        with:
          pattern: "*-allure-report"
          path: allure-reports/
          merge-multiple: true
        continue-on-error: true
          
      - name: Debug Downloaded Artifacts
        run: |
          echo "=== Downloaded Allure Reports ==="
          if [ -d "allure-reports" ]; then
            echo "allure-reports directory exists"
            ls -la allure-reports/
            echo "Subdirectories:"
            find allure-reports/ -type d -maxdepth 2
            echo "Files:"
            find allure-reports/ -type f | head -20
          else
            echo "allure-reports directory does not exist"
          fi
          
      - name: Download Playwright Reports
        uses: actions/download-artifact@v4
        with:
          pattern: "*-playwright-report"
          path: playwright-reports/
          merge-multiple: true
        continue-on-error: true
          
      - name: Download Coverage Reports
        uses: actions/download-artifact@v4
        with:
          pattern: "*-coverage-report"
          path: coverage-reports/
          merge-multiple: true
        continue-on-error: true

      - name: Setup Python for report combination
        uses: actions/setup-python@v4
        with:
          python-version: '3.13'

      - name: Deploy Test Results Dashboard
        run: |
          # Create deployment directory
          mkdir -p gh-pages-deploy
          
          # Copy the main landing page
          if [ -f "docs/index.html" ]; then
            echo "Copying main landing page..."
            cp docs/index.html gh-pages-deploy/index.html
          else
            echo "Creating basic landing page..."
            cat > gh-pages-deploy/index.html << 'EOF'
          <!DOCTYPE html>
          <html>
          <head>
              <title>Test Results Dashboard</title>
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
              <style>
                  * { box-sizing: border-box; }
                  body { 
                      font-family: 'Inter', system-ui, -apple-system, sans-serif; 
                      margin: 0; 
                      padding: 0;
                      background: linear-gradient(135deg, #f8fafc 0%, #ffffff 50%, #f1f5f9 100%); 
                      color: #0f172a; 
                      min-height: 100vh;
                      line-height: 1.6;
                  }
                  .container { 
                      max-width: 1200px; 
                      margin: 0 auto; 
                      padding: 2rem 1rem; 
                      text-align: center; 
                  }
                  .header {
                      margin-bottom: 3rem;
                  }
                  .header h1 { 
                      font-size: 3rem; 
                      font-weight: 700; 
                      margin: 0 0 1rem 0;
                      background: linear-gradient(45deg, #0f172a, #334155);
                      -webkit-background-clip: text;
                      -webkit-text-fill-color: transparent;
                      background-clip: text;
                  }
                  .header p { 
                      font-size: 1.25rem; 
                      font-weight: 400; 
                      color: #64748b;
                      margin: 0;
                  }
                  .modules-grid {
                      display: grid;
                      grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
                      gap: 2rem;
                      margin-bottom: 3rem;
                  }
                  .module { 
                      background: #ffffff; 
                      color: #0f172a; 
                      border-radius: 24px; 
                      padding: 2rem;
                      box-shadow: 0 10px 25px rgba(0, 0, 0, 0.08);
                      border: 1px solid #e2e8f0;
                      transition: all 0.3s ease;
                  }
                  .module:hover {
                      transform: translateY(-5px);
                      box-shadow: 0 20px 40px rgba(0, 0, 0, 0.12);
                      border-color: #cbd5e1;
                  }
                  .module h2 { 
                      color: #1e40af; 
                      font-size: 1.5rem;
                      font-weight: 600;
                      margin: 0 0 1rem 0;
                      display: flex;
                      align-items: center;
                      gap: 0.5rem;
                  }
                  .module p { 
                      color: #64748b; 
                      margin: 0 0 1.5rem 0;
                      font-size: 1rem;
                  }
                  .module-links {
                      display: flex;
                      flex-wrap: wrap;
                      gap: 0.75rem;
                      justify-content: center;
                  }
                  .module a { 
                      color: #ffffff; 
                      text-decoration: none; 
                      padding: 0.75rem 1.5rem; 
                      background: linear-gradient(135deg, #3b82f6, #2563eb);
                      border-radius: 12px; 
                      display: inline-block; 
                      font-weight: 500;
                      font-size: 0.875rem;
                      transition: all 0.2s ease;
                      border: none;
                      cursor: pointer;
                  }
                  .module a:hover { 
                      background: linear-gradient(135deg, #2563eb, #1d4ed8);
                      transform: translateY(-1px);
                      box-shadow: 0 4px 12px rgba(59, 130, 246, 0.4);
                  }
                  .module a:active {
                      transform: translateY(0);
                  }
                  .footer {
                      margin-top: 3rem;
                      padding: 2rem;
                      background: #f8fafc;
                      border-radius: 16px;
                      border: 1px solid #e2e8f0;
                  }
                  .footer p {
                      margin: 0;
                      color: #64748b;
                      font-size: 0.875rem;
                  }
                  @media (max-width: 768px) {
                      .container { padding: 1rem; }
                      .header h1 { font-size: 2rem; }
                      .header p { font-size: 1rem; }
                      .modules-grid { grid-template-columns: 1fr; gap: 1.5rem; }
                      .module { padding: 1.5rem; }
                      .module-links { flex-direction: column; align-items: center; }
                      .module a { width: 100%; max-width: 200px; }
                  }
              </style>
          </head>
          <body>
              <div class="container">
                  <div class="header">
                      <h1>🧪 Test Results Dashboard</h1>
                      <p>Comprehensive test automation portfolio showcasing 10+ years of SDET expertise</p>
                  </div>
                  
                  <div class="modules-grid">
                      <div class="module">
                          <h2>📊 Combined Test Results</h2>
                          <p>Unified Allure reports from all modules</p>
                          <div class="module-links">
                              <a href="combined-allure/">View Combined Allure Report</a>
                          </div>
                      </div>
                      
                      <div class="module">
                          <h2>🤖 Automation Framework</h2>
                          <p>Python/TypeScript test automation framework</p>
                          <div class="module-links">
                              <a href="automation-framework/">View Allure Report</a>
                              <a href="automation-framework/coverage/">View Coverage Report</a>
                          </div>
                      </div>
                      
                      <div class="module">
                          <h2>🧠 AI Rulesets</h2>
                          <p>AI-powered development standards and quality tools</p>
                          <div class="module-links">
                              <a href="ai-rulesets/">View Allure Report</a>
                              <a href="ai-rulesets/coverage/">View Coverage Report</a>
                          </div>
                      </div>
                      
                      <div class="module">
                          <h2>☁️ Cloud Native App</h2>
                          <p>AWS serverless demo with Lambda and DynamoDB</p>
                          <div class="module-links">
                              <a href="cloud-native-app/">View Allure Report</a>
                              <a href="cloud-native-app/coverage/">View Coverage Report</a>
                          </div>
                      </div>
                      
                      <div class="module">
                          <h2>⚛️ React Playwright Demo</h2>
                          <p>Modern React/TypeScript frontend with E2E testing</p>
                          <div class="module-links">
                              <a href="react-playwright-demo/">View Allure Report</a>
                              <a href="react-playwright-demo/playwright/">View Playwright Report</a>
                              <a href="react-playwright-demo/coverage/">View Coverage Report</a>
                          </div>
                      </div>
                  </div>
                  
                  <div class="footer">
                      <p>Reports are automatically updated on every successful build of the main branch.</p>
                  </div>
              </div>
          </body>
          </html>
          EOF
          fi
          
          # Copy individual module reports
          echo "=== Copying Module Reports ==="
          if [ -d "allure-reports/automation-framework-allure-report" ]; then
            echo "Found automation-framework report, copying..."
            cp -r allure-reports/automation-framework-allure-report gh-pages-deploy/automation-framework
            echo "Automation framework report copied successfully"
            ls -la gh-pages-deploy/automation-framework/
          else
            echo "Automation framework report not found, creating placeholder..."
            echo "Available allure-reports:"
            ls -la allure-reports/ || echo "No allure-reports directory"
            mkdir -p gh-pages-deploy/automation-framework
            echo "<!DOCTYPE html><html><head><title>Allure Reports - Automation Framework</title></head><body><h1>Allure Test Reports - Automation Framework</h1><p>Reports will be available after test execution.</p><p>Debug: No automation-framework-allure-report directory found in allure-reports/</p></body></html>" > gh-pages-deploy/automation-framework/index.html
          fi
          
          if [ -d "allure-reports/ai-rulesets-allure-report" ]; then
            echo "Found ai-rulesets report, copying..."
            cp -r allure-reports/ai-rulesets-allure-report gh-pages-deploy/ai-rulesets
            echo "AI rulesets report copied successfully"
          else
            echo "AI rulesets report not found, creating placeholder..."
            mkdir -p gh-pages-deploy/ai-rulesets
            echo "<!DOCTYPE html><html><head><title>Allure Reports - AI Rulesets</title></head><body><h1>Allure Test Reports - AI Rulesets</h1><p>Reports will be available after test execution.</p><p>Debug: No ai-rulesets-allure-report directory found in allure-reports/</p></body></html>" > gh-pages-deploy/ai-rulesets/index.html
          fi
          
          if [ -d "allure-reports/cloud-native-app-allure-report" ]; then
            echo "Found cloud-native-app report, copying..."
            cp -r allure-reports/cloud-native-app-allure-report gh-pages-deploy/cloud-native-app
            echo "Cloud native app report copied successfully"
          else
            echo "Cloud native app report not found, creating placeholder..."
            mkdir -p gh-pages-deploy/cloud-native-app
            echo "<!DOCTYPE html><html><head><title>Allure Reports - Cloud Native App</title></head><body><h1>Allure Test Reports - Cloud Native App</h1><p>Reports will be available after test execution.</p><p>Debug: No cloud-native-app-allure-report directory found in allure-reports/</p></body></html>" > gh-pages-deploy/cloud-native-app/index.html
          fi
          
          if [ -d "allure-reports/react-playwright-demo-allure-report" ]; then
            echo "Found react-playwright-demo report, copying..."
            cp -r allure-reports/react-playwright-demo-allure-report gh-pages-deploy/react-playwright-demo
            echo "React playwright demo report copied successfully"
          else
            echo "React playwright demo report not found, creating placeholder..."
            mkdir -p gh-pages-deploy/react-playwright-demo
            echo "<!DOCTYPE html><html><head><title>Allure Reports - React Playwright Demo</title></head><body><h1>Allure Test Reports - React Playwright Demo</h1><p>Reports will be available after test execution.</p><p>Debug: No react-playwright-demo-allure-report directory found in allure-reports/</p></body></html>" > gh-pages-deploy/react-playwright-demo/index.html
          fi
          
          # Copy Playwright reports
          if [ -d "playwright-reports" ]; then
            echo "Copying Playwright reports..."
            cp -r playwright-reports gh-pages-deploy/playwright-reports
            # Also copy to react-playwright-demo/playwright for direct access
            mkdir -p gh-pages-deploy/react-playwright-demo/playwright
            cp -r playwright-reports/* gh-pages-deploy/react-playwright-demo/playwright/ 2>/dev/null || true
          else
            echo "Creating placeholder for Playwright reports..."
            mkdir -p gh-pages-deploy/playwright-reports
            mkdir -p gh-pages-deploy/react-playwright-demo/playwright
            echo "<!DOCTYPE html><html><head><title>Playwright Reports</title></head><body><h1>Playwright Test Reports</h1><p>Reports will be available after test execution.</p></body></html>" > gh-pages-deploy/playwright-reports/index.html
            echo "<!DOCTYPE html><html><head><title>Playwright Reports</title></head><body><h1>Playwright Test Reports</h1><p>Reports will be available after test execution.</p></body></html>" > gh-pages-deploy/react-playwright-demo/playwright/index.html
          fi
          
          # Copy Coverage reports
          if [ -d "coverage-reports" ]; then
            echo "Copying Coverage reports..."
            cp -r coverage-reports gh-pages-deploy/coverage-reports
            # Also copy individual module coverage reports
            for module in automation-framework ai-rulesets cloud-native-app react-playwright-demo; do
              if [ -d "coverage-reports/${module}-coverage-report" ]; then
                mkdir -p gh-pages-deploy/${module}/coverage
                cp -r coverage-reports/${module}-coverage-report/* gh-pages-deploy/${module}/coverage/ 2>/dev/null || true
              fi
            done
          else
            echo "Creating placeholder for Coverage reports..."
            mkdir -p gh-pages-deploy/coverage-reports
            echo "<!DOCTYPE html><html><head><title>Coverage Reports</title></head><body><h1>Code Coverage Reports</h1><p>Reports will be available after test execution.</p></body></html>" > gh-pages-deploy/coverage-reports/index.html
          fi
          
          # Create combined Allure report
          echo "Creating combined Allure report..."
          mkdir -p gh-pages-deploy/combined-allure
          
          # Collect all Allure results directories
          ALLURE_RESULTS_DIRS=""
          for module in automation-framework ai-rulesets cloud-native-app react-playwright-demo; do
            if [ -d "allure-reports/${module}-allure-report" ]; then
              # Extract results from the report directory
              RESULTS_DIR="allure-reports/${module}-allure-report"
              if [ -d "${RESULTS_DIR}/data/test-cases" ]; then
                ALLURE_RESULTS_DIRS="${ALLURE_RESULTS_DIRS} ${RESULTS_DIR}/data/test-cases"
              fi
            fi
          done
          
          # If we have Allure results, combine them
          if [ -n "$ALLURE_RESULTS_DIRS" ]; then
            echo "Combining Allure results from: $ALLURE_RESULTS_DIRS"
            python3 scripts/combine-allure-reports.py --sources $ALLURE_RESULTS_DIRS --output gh-pages-deploy/combined-allure-results --summary gh-pages-deploy/combined-summary.json
            
            # Generate combined Allure report if Allure is available
            if command -v allure >/dev/null 2>&1; then
              allure generate gh-pages-deploy/combined-allure-results --clean -o gh-pages-deploy/combined-allure
              echo "Combined Allure report generated"
            else
              echo "Allure not available, creating placeholder for combined report"
              echo "<!DOCTYPE html><html><head><title>Combined Allure Report</title></head><body><h1>Combined Allure Test Report</h1><p>Combined test results from all modules. Allure commandline required to generate full report.</p><p>Run: allure generate combined-allure-results --clean -o combined-allure</p></body></html>" > gh-pages-deploy/combined-allure/index.html
            fi
          else
            echo "No Allure results found, creating placeholder"
            echo "<!DOCTYPE html><html><head><title>Combined Allure Report</title></head><body><h1>Combined Allure Test Report</h1><p>Reports will be available after test execution.</p></body></html>" > gh-pages-deploy/combined-allure/index.html
          fi
          
          # Create combined coverage report placeholder
          echo "Creating combined coverage report..."
          mkdir -p gh-pages-deploy/combined-coverage
          echo "<!DOCTYPE html><html><head><title>Combined Coverage Report</title></head><body><h1>Combined Code Coverage Report</h1><p>Combined coverage analysis from all modules will be available after test execution.</p></body></html>" > gh-pages-deploy/combined-coverage/index.html

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: gh-pages-deploy

      - name: Deploy to GitHub Pages
        id: deployment
        if: always()
        uses: actions/deploy-pages@v4
