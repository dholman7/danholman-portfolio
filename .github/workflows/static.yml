# Deploy Test Results Dashboard to GitHub Pages
name: Deploy Test Results Dashboard to Pages

on:
  # Only allow being called as a reusable workflow from the test suite
  workflow_call:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Deploy test results dashboard
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          # For PRs, checkout the PR branch; for push/manual dispatch, checkout the current branch
          ref: ${{ github.event_name == 'pull_request' && github.head_ref || github.ref }}

      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Download Static Allure Reports
        uses: actions/download-artifact@v4
        with:
          name: static-allure-reports
          path: static-reports/
          merge-multiple: true
        continue-on-error: true
          
      - name: Download Playwright Reports
        uses: actions/download-artifact@v4
        with:
          pattern: "*-playwright-report"
          path: playwright-reports/
          merge-multiple: true
        continue-on-error: true
          
      - name: Download Coverage Reports
        uses: actions/download-artifact@v4
        with:
          pattern: "*-coverage-report"
          path: coverage-reports/
          merge-multiple: true
        continue-on-error: true
        id: download-coverage
          

      - name: Deploy Test Results Dashboard
        run: |
          # Create deployment directory
          mkdir -p gh-pages-deploy
          
          # Debug coverage reports structure
          echo "=== Coverage Reports Debug ==="
          if [ -d "coverage-reports" ]; then
            echo "Coverage reports directory exists"
            ls -la coverage-reports/
            echo "Subdirectories:"
            find coverage-reports/ -type d -maxdepth 2
            echo "Files:"
            find coverage-reports/ -type f | head -20
          else
            echo "No coverage-reports directory found"
          fi
          
          # Copy the main landing page
          echo "Copying main landing page from dashboard/index.html..."
          cp dashboard/index.html gh-pages-deploy/index.html
          
          # Copy individual module reports from static location
          echo "=== Copying Module Reports from Static Location ==="
          if [ -d "static-reports/allure-reports/automation-framework" ]; then
            echo "Found automation-framework report in static location, copying..."
            cp -r static-reports/allure-reports/automation-framework gh-pages-deploy/automation-framework
            echo "Automation framework report copied successfully"
            ls -la gh-pages-deploy/automation-framework/
          else
            echo "Automation framework report not found in static location, creating placeholder..."
            mkdir -p gh-pages-deploy/automation-framework
            echo "<!DOCTYPE html><html><head><title>Allure Reports - Automation Framework</title></head><body><h1>Allure Test Reports - Automation Framework</h1><p>Reports will be available after test execution.</p><p>Debug: No automation-framework directory found in static-reports/allure-reports/</p></body></html>" > gh-pages-deploy/automation-framework/index.html
          fi
          
          if [ -d "static-reports/allure-reports/ai-rulesets" ]; then
            echo "Found ai-rulesets report in static location, copying..."
            cp -r static-reports/allure-reports/ai-rulesets gh-pages-deploy/ai-rulesets
            echo "AI rulesets report copied successfully"
          else
            echo "AI rulesets report not found in static location, creating placeholder..."
            mkdir -p gh-pages-deploy/ai-rulesets
            echo "<!DOCTYPE html><html><head><title>Allure Reports - AI Rulesets</title></head><body><h1>Allure Test Reports - AI Rulesets</h1><p>Reports will be available after test execution.</p><p>Debug: No ai-rulesets directory found in static-reports/allure-reports/</p></body></html>" > gh-pages-deploy/ai-rulesets/index.html
          fi
          
          if [ -d "static-reports/allure-reports/cloud-native-app" ]; then
            echo "Found cloud-native-app report in static location, copying..."
            cp -r static-reports/allure-reports/cloud-native-app gh-pages-deploy/cloud-native-app
            echo "Cloud native app report copied successfully"
          else
            echo "Cloud native app report not found in static location, creating placeholder..."
            mkdir -p gh-pages-deploy/cloud-native-app
            echo "<!DOCTYPE html><html><head><title>Allure Reports - Cloud Native App</title></head><body><h1>Allure Test Reports - Cloud Native App</h1><p>Reports will be available after test execution.</p><p>Debug: No cloud-native-app directory found in static-reports/allure-reports/</p></body></html>" > gh-pages-deploy/cloud-native-app/index.html
          fi
          
          if [ -d "static-reports/allure-reports/react-playwright-demo" ]; then
            echo "Found react-playwright-demo report in static location, copying..."
            cp -r static-reports/allure-reports/react-playwright-demo gh-pages-deploy/react-playwright-demo
            echo "React playwright demo report copied successfully"
          else
            echo "React playwright demo report not found in static location, creating placeholder..."
            mkdir -p gh-pages-deploy/react-playwright-demo
            echo "<!DOCTYPE html><html><head><title>Allure Reports - React Playwright Demo</title></head><body><h1>Allure Test Reports - React Playwright Demo</h1><p>Reports will be available after test execution.</p><p>Debug: No react-playwright-demo directory found in static-reports/allure-reports/</p></body></html>" > gh-pages-deploy/react-playwright-demo/index.html
          fi
          
          # Copy Playwright reports
          if [ -d "playwright-reports" ]; then
            echo "Copying Playwright reports..."
            cp -r playwright-reports gh-pages-deploy/playwright-reports
            # Also copy to react-playwright-demo/playwright for direct access
            mkdir -p gh-pages-deploy/react-playwright-demo/playwright
            cp -r playwright-reports/* gh-pages-deploy/react-playwright-demo/playwright/ 2>/dev/null || true
          else
            echo "Creating placeholder for Playwright reports..."
            mkdir -p gh-pages-deploy/playwright-reports
            mkdir -p gh-pages-deploy/react-playwright-demo/playwright
            echo "<!DOCTYPE html><html><head><title>Playwright Reports</title></head><body><h1>Playwright Test Reports</h1><p>Reports will be available after test execution.</p></body></html>" > gh-pages-deploy/playwright-reports/index.html
            echo "<!DOCTYPE html><html><head><title>Playwright Reports</title></head><body><h1>Playwright Test Reports</h1><p>Reports will be available after test execution.</p></body></html>" > gh-pages-deploy/react-playwright-demo/playwright/index.html
          fi
          
          # Copy Coverage reports
          if [ -d "coverage-reports" ]; then
            echo "Copying Coverage reports..."
            cp -r coverage-reports gh-pages-deploy/coverage-reports
            
            # Copy individual module coverage reports to module root level
            for module in automation-framework ai-rulesets cloud-native-app react-playwright-demo; do
              echo "Processing coverage for ${module}..."
              echo "Looking for coverage-reports/${module}-coverage-report"
              
              # Check for the artifact directory with the expected naming pattern
              if [ -d "coverage-reports/${module}-coverage-report" ]; then
                echo "Found ${module} coverage report in coverage-reports/${module}-coverage-report"
                mkdir -p gh-pages-deploy/${module}/coverage
                cp -r coverage-reports/${module}-coverage-report/* gh-pages-deploy/${module}/coverage/ 2>/dev/null || true
                echo "Coverage copied to gh-pages-deploy/${module}/coverage/"
                ls -la gh-pages-deploy/${module}/coverage/ || echo "No coverage files found"
                
                # Create index.html if it doesn't exist
                if [ ! -f "gh-pages-deploy/${module}/coverage/index.html" ]; then
                  echo "Creating index.html for ${module} coverage..."
                  echo "<!DOCTYPE html><html><head><title>Coverage Report - ${module}</title></head><body><h1>Code Coverage Report - ${module}</h1><p>Coverage report will be available after test execution.</p></body></html>" > gh-pages-deploy/${module}/coverage/index.html
                fi
              else
                echo "No coverage report found for ${module} in coverage-reports/${module}-coverage-report"
                # Create placeholder for missing coverage
                mkdir -p gh-pages-deploy/${module}/coverage
                echo "<!DOCTYPE html><html><head><title>Coverage Report - ${module}</title></head><body><h1>Code Coverage Report - ${module}</h1><p>Coverage report will be available after test execution.</p><p>Debug: No ${module}-coverage-report artifact found</p></body></html>" > gh-pages-deploy/${module}/coverage/index.html
              fi
            done
          else
            echo "Creating placeholder for Coverage reports..."
            mkdir -p gh-pages-deploy/coverage-reports
            echo "<!DOCTYPE html><html><head><title>Coverage Reports</title></head><body><h1>Code Coverage Reports</h1><p>Reports will be available after test execution.</p></body></html>" > gh-pages-deploy/coverage-reports/index.html
          fi
          
          # Copy combined reports from static location
          echo "Copying combined Allure report..."
          if [ -d "static-reports/allure-reports/combined-allure" ]; then
            echo "Found combined Allure report in static location, copying..."
            cp -r static-reports/allure-reports/combined-allure gh-pages-deploy/combined-allure
            echo "Combined Allure report copied successfully"
          else
            echo "Combined Allure report not found in static location, creating placeholder..."
            mkdir -p gh-pages-deploy/combined-allure
            echo "<!DOCTYPE html><html><head><title>Combined Allure Report</title></head><body><h1>Combined Allure Test Report</h1><p>Reports will be available after test execution.</p><p>Debug: No combined-allure directory found in static-reports/allure-reports/</p></body></html>" > gh-pages-deploy/combined-allure/index.html
          fi
          
          echo "Copying combined coverage report..."
          if [ -d "static-reports/allure-reports/combined-coverage" ]; then
            echo "Found combined coverage report in static location, copying..."
            cp -r static-reports/allure-reports/combined-coverage gh-pages-deploy/combined-coverage
            echo "Combined coverage report copied successfully"
          else
            echo "Combined coverage report not found in static location, creating placeholder..."
            mkdir -p gh-pages-deploy/combined-coverage
            echo "<!DOCTYPE html><html><head><title>Combined Coverage Report</title></head><body><h1>Combined Code Coverage Report</h1><p>Combined coverage analysis from all modules will be available after test execution.</p><p>Debug: No combined-coverage directory found in static-reports/allure-reports/</p></body></html>" > gh-pages-deploy/combined-coverage/index.html
          fi

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: gh-pages-deploy

      - name: Deploy to GitHub Pages
        id: deployment
        if: always()
        uses: actions/deploy-pages@v4
