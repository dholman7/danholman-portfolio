# Deploy Test Results Dashboard to GitHub Pages
name: Deploy Test Results Dashboard to Pages

on:
  # Run on pushes to main (when test suite generates artifacts)
  push:
    branches: ["main"]
    paths:
      - 'automation-framework/**'
      - 'cloud-native-app/**'
      - 'ai-rulesets/**'
      - 'react-playwright-demo/**'
      - '.github/workflows/**'
      - 'dashboard/**'
      - 'docs/**'
      - 'scripts/**'
      - 'Makefile'
      - 'README.md'

  # Also run on pull requests for previews
  pull_request:
    branches: ["main"]
    paths:
      - 'automation-framework/**'
      - 'cloud-native-app/**'
      - 'ai-rulesets/**'
      - 'react-playwright-demo/**'
      - '.github/workflows/**'
      - 'dashboard/**'
      - 'docs/**'
      - 'scripts/**'
      - 'Makefile'
      - 'README.md'

  # Allow manual trigger for testing
  workflow_dispatch:

  # Allow being called as a reusable workflow
  workflow_call:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Deploy test results dashboard
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    # Run on push to main, PRs, or manual dispatch
    if: github.event_name == 'push' || github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          # For PRs, checkout the PR branch; for push/manual dispatch, checkout the current branch
          ref: ${{ github.event_name == 'pull_request' && github.head_ref || github.ref }}

      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Download Allure Reports
        uses: actions/download-artifact@v4
        with:
          pattern: "*-allure-report"
          path: allure-reports/
          merge-multiple: true
        continue-on-error: true
          
      - name: Debug Downloaded Artifacts
        run: |
          echo "=== Downloaded Allure Reports ==="
          if [ -d "allure-reports" ]; then
            echo "allure-reports directory exists"
            ls -la allure-reports/
            echo "Subdirectories:"
            find allure-reports/ -type d -maxdepth 2
            echo "Files:"
            find allure-reports/ -type f | head -20
          else
            echo "allure-reports directory does not exist"
          fi
          
      - name: Download Playwright Reports
        uses: actions/download-artifact@v4
        with:
          pattern: "*-playwright-report"
          path: playwright-reports/
          merge-multiple: true
        continue-on-error: true
          
      - name: Download Coverage Reports
        uses: actions/download-artifact@v4
        with:
          pattern: "*-coverage-report"
          path: coverage-reports/
          merge-multiple: true
        continue-on-error: true

      - name: Setup Python for report combination
        uses: actions/setup-python@v4
        with:
          python-version: '3.13'

      - name: Deploy Test Results Dashboard
        run: |
          # Create deployment directory
          mkdir -p gh-pages-deploy
          
          # Copy the main landing page
          echo "Copying main landing page from dashboard/index.html..."
          cp dashboard/index.html gh-pages-deploy/index.html
          
          # Copy individual module reports
          echo "=== Copying Module Reports ==="
          if [ -d "allure-reports/automation-framework-allure-report" ]; then
            echo "Found automation-framework report, copying..."
            cp -r allure-reports/automation-framework-allure-report gh-pages-deploy/automation-framework
            echo "Automation framework report copied successfully"
            ls -la gh-pages-deploy/automation-framework/
          else
            echo "Automation framework report not found, creating placeholder..."
            echo "Available allure-reports:"
            ls -la allure-reports/ || echo "No allure-reports directory"
            mkdir -p gh-pages-deploy/automation-framework
            echo "<!DOCTYPE html><html><head><title>Allure Reports - Automation Framework</title></head><body><h1>Allure Test Reports - Automation Framework</h1><p>Reports will be available after test execution.</p><p>Debug: No automation-framework-allure-report directory found in allure-reports/</p></body></html>" > gh-pages-deploy/automation-framework/index.html
          fi
          
          if [ -d "allure-reports/ai-rulesets-allure-report" ]; then
            echo "Found ai-rulesets report, copying..."
            cp -r allure-reports/ai-rulesets-allure-report gh-pages-deploy/ai-rulesets
            echo "AI rulesets report copied successfully"
          else
            echo "AI rulesets report not found, creating placeholder..."
            mkdir -p gh-pages-deploy/ai-rulesets
            echo "<!DOCTYPE html><html><head><title>Allure Reports - AI Rulesets</title></head><body><h1>Allure Test Reports - AI Rulesets</h1><p>Reports will be available after test execution.</p><p>Debug: No ai-rulesets-allure-report directory found in allure-reports/</p></body></html>" > gh-pages-deploy/ai-rulesets/index.html
          fi
          
          if [ -d "allure-reports/cloud-native-app-allure-report" ]; then
            echo "Found cloud-native-app report, copying..."
            cp -r allure-reports/cloud-native-app-allure-report gh-pages-deploy/cloud-native-app
            echo "Cloud native app report copied successfully"
          else
            echo "Cloud native app report not found, creating placeholder..."
            mkdir -p gh-pages-deploy/cloud-native-app
            echo "<!DOCTYPE html><html><head><title>Allure Reports - Cloud Native App</title></head><body><h1>Allure Test Reports - Cloud Native App</h1><p>Reports will be available after test execution.</p><p>Debug: No cloud-native-app-allure-report directory found in allure-reports/</p></body></html>" > gh-pages-deploy/cloud-native-app/index.html
          fi
          
          if [ -d "allure-reports/react-playwright-demo-allure-report" ]; then
            echo "Found react-playwright-demo report, copying..."
            cp -r allure-reports/react-playwright-demo-allure-report gh-pages-deploy/react-playwright-demo
            echo "React playwright demo report copied successfully"
          else
            echo "React playwright demo report not found, creating placeholder..."
            mkdir -p gh-pages-deploy/react-playwright-demo
            echo "<!DOCTYPE html><html><head><title>Allure Reports - React Playwright Demo</title></head><body><h1>Allure Test Reports - React Playwright Demo</h1><p>Reports will be available after test execution.</p><p>Debug: No react-playwright-demo-allure-report directory found in allure-reports/</p></body></html>" > gh-pages-deploy/react-playwright-demo/index.html
          fi
          
          # Copy Playwright reports
          if [ -d "playwright-reports" ]; then
            echo "Copying Playwright reports..."
            cp -r playwright-reports gh-pages-deploy/playwright-reports
            # Also copy to react-playwright-demo/playwright for direct access
            mkdir -p gh-pages-deploy/react-playwright-demo/playwright
            cp -r playwright-reports/* gh-pages-deploy/react-playwright-demo/playwright/ 2>/dev/null || true
          else
            echo "Creating placeholder for Playwright reports..."
            mkdir -p gh-pages-deploy/playwright-reports
            mkdir -p gh-pages-deploy/react-playwright-demo/playwright
            echo "<!DOCTYPE html><html><head><title>Playwright Reports</title></head><body><h1>Playwright Test Reports</h1><p>Reports will be available after test execution.</p></body></html>" > gh-pages-deploy/playwright-reports/index.html
            echo "<!DOCTYPE html><html><head><title>Playwright Reports</title></head><body><h1>Playwright Test Reports</h1><p>Reports will be available after test execution.</p></body></html>" > gh-pages-deploy/react-playwright-demo/playwright/index.html
          fi
          
          # Copy Coverage reports
          if [ -d "coverage-reports" ]; then
            echo "Copying Coverage reports..."
            cp -r coverage-reports gh-pages-deploy/coverage-reports
            # Also copy individual module coverage reports
            for module in automation-framework ai-rulesets cloud-native-app react-playwright-demo; do
              if [ -d "coverage-reports/${module}-coverage-report" ]; then
                mkdir -p gh-pages-deploy/${module}/coverage
                cp -r coverage-reports/${module}-coverage-report/* gh-pages-deploy/${module}/coverage/ 2>/dev/null || true
              fi
            done
          else
            echo "Creating placeholder for Coverage reports..."
            mkdir -p gh-pages-deploy/coverage-reports
            echo "<!DOCTYPE html><html><head><title>Coverage Reports</title></head><body><h1>Code Coverage Reports</h1><p>Reports will be available after test execution.</p></body></html>" > gh-pages-deploy/coverage-reports/index.html
          fi
          
          # Create combined Allure report
          echo "Creating combined Allure report..."
          mkdir -p gh-pages-deploy/combined-allure
          
          # Collect all Allure results directories
          ALLURE_RESULTS_DIRS=""
          for module in automation-framework ai-rulesets cloud-native-app react-playwright-demo; do
            if [ -d "allure-reports/${module}-allure-report" ]; then
              # Extract results from the report directory
              RESULTS_DIR="allure-reports/${module}-allure-report"
              if [ -d "${RESULTS_DIR}/data/test-cases" ]; then
                ALLURE_RESULTS_DIRS="${ALLURE_RESULTS_DIRS} ${RESULTS_DIR}/data/test-cases"
              fi
            fi
          done
          
          # If we have Allure results, combine them
          if [ -n "$ALLURE_RESULTS_DIRS" ]; then
            echo "Combining Allure results from: $ALLURE_RESULTS_DIRS"
            python3 scripts/combine-allure-reports.py --sources $ALLURE_RESULTS_DIRS --output gh-pages-deploy/combined-allure-results --summary gh-pages-deploy/combined-summary.json
            
            # Generate combined Allure report if Allure is available
            if command -v allure >/dev/null 2>&1; then
              allure generate gh-pages-deploy/combined-allure-results --clean -o gh-pages-deploy/combined-allure
              echo "Combined Allure report generated"
            else
              echo "Allure not available, creating placeholder for combined report"
              echo "<!DOCTYPE html><html><head><title>Combined Allure Report</title></head><body><h1>Combined Allure Test Report</h1><p>Combined test results from all modules. Allure commandline required to generate full report.</p><p>Run: allure generate combined-allure-results --clean -o combined-allure</p></body></html>" > gh-pages-deploy/combined-allure/index.html
            fi
          else
            echo "No Allure results found, creating placeholder"
            echo "<!DOCTYPE html><html><head><title>Combined Allure Report</title></head><body><h1>Combined Allure Test Report</h1><p>Reports will be available after test execution.</p></body></html>" > gh-pages-deploy/combined-allure/index.html
          fi
          
          # Create combined coverage report placeholder
          echo "Creating combined coverage report..."
          mkdir -p gh-pages-deploy/combined-coverage
          echo "<!DOCTYPE html><html><head><title>Combined Coverage Report</title></head><body><h1>Combined Code Coverage Report</h1><p>Combined coverage analysis from all modules will be available after test execution.</p></body></html>" > gh-pages-deploy/combined-coverage/index.html

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: gh-pages-deploy

      - name: Deploy to GitHub Pages
        id: deployment
        if: always()
        uses: actions/deploy-pages@v4
